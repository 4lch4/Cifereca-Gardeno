name: Digital Garden Beta Build & Release

on:
  push:
    branches: [develop]
  pull_request:
    branches: [develop]

env:
  DOCKER_REPO: "ghcr.io/${{ github.repository_owner }}"

jobs:
  build:
    name: Build & Push Docker Image
    runs-on: ubuntu-20.04

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set APP_NAME Variable
        run: echo APP_NAME=$(echo "$GITHUB_REPOSITORY" | awk -F / '{print tolower($2)}') >> $GITHUB_ENV
        shell: bash

      - name: Set APP_NAMESPACE Variable
        run: echo APP_NAMESPACE=$(echo "$APP_NAME-beta") >> $GITHUB_ENV
        shell: bash

      - name: Set IMAGE_NAME Variable
        run: echo IMAGE_NAME=$(echo "$DOCKER_REPO/$APP_NAME") >> $GITHUB_ENV
        shell: bash

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Setup Node.js environment
        uses: actions/setup-node@v2.1.5
        with:
          node-version: '16'

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 'Install Dependencies'
        run: npm i

      - name: 'Build Static Files'
        run: npm run build

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: |
            "${{ env.IMAGE_NAME }}:${{ github.RUN_ID }}"
            "${{ env.IMAGE_NAME }}:latest"

      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}

  release:
    name: Deploy Image to Kubernetes
    runs-on: ubuntu-20.04
    needs: ['build']
    environment: 'beta'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: DigitalOcean Kubernetes
        uses: matootie/dokube@v1.3.4
        with:
          personalAccessToken: '${{ secrets.DO_ACCESS_TOKEN }}'
          clusterName: '${{ secrets.DO_CLUSTER_NAME }}'
          namespace: '${{ env.APP_NAMESPACE }}'
          version: '1.21.1'

      - name: Replace tokens
        uses: cschleiden/replace-tokens@v1.0
        env:
          APP_NAME: ${{ env.APP_NAME }}
          APP_NAMESPACE: ${{ env.APP_NAMESPACE }}
          IMAGE_NAME: ${{ env.IMAGE_NAME }}
          RUN_ID: ${{ github.RUN_ID }}
          DNS_ADDRESS: ${{ secrets.DNS_ADDRESS }}
        with:
          files: manifest.yml

      - name: Apply Manifest
        run: kubectl apply -f manifest.yml

      - uses: sarisia/actions-status-discord@v1
        if: always()
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
          # description: 'If successful, the new latest image is ${{ github.RUN_ID }}'
