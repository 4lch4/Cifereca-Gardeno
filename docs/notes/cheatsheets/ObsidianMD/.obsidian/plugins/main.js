/*
THIS IS A GENERATED/BUNDLED FILE BY ROLLUP
if you want to view the source visit the plugins github repository
*/

'use strict'

var obsidian = require('obsidian')

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P
      ? value
      : new P(function (resolve) {
          resolve(value)
        })
  }
  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value))
      } catch (e) {
        reject(e)
      }
    }
    function rejected(value) {
      try {
        step(generator['throw'](value))
      } catch (e) {
        reject(e)
      }
    }
    function step(result) {
      result.done
        ? resolve(result.value)
        : adopt(result.value).then(fulfilled, rejected)
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next())
  })
}

const DEFAULT_SETTINGS = {
  settingsCurrentlyReadingURL: 'default',
  settingsReadURL: 'default'
}

class SampleModal extends obsidian.Modal {
  constructor(app) {
    super(app)
  }
  onOpen() {
    let { contentEl } = this
    contentEl.setText('Woah!')
  }
  onClose() {
    let { contentEl } = this
    contentEl.empty()
  }
}

class SampleSettingTab extends obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin)
    this.plugin = plugin
  }
  // Settings for plugin
  display() {
    let { containerEl } = this
    containerEl.empty()
    containerEl.createEl('h3', { text: 'Goodsidian Settings' })
    containerEl.createEl('p', {
      text: 'If you notice any issues, update to the latest version of Goodsidian and reload Obsidian.'
    })
    new obsidian.Setting(containerEl)
      .setName('Currently-Reading URL')
      .setDesc(
        'You can find the RSS feed at the bottom of your Goodreads shelf.'
      )
      .addText(text =>
        text
          .setPlaceholder('Currently-Reading RSS URL')
          .setValue(this.plugin.settings.settingsCurrentlyReadingURL)
          .onChange(value =>
            __awaiter(this, void 0, void 0, function* () {
              console.log(`Changed currently-reading url to: ${value}`)
              this.plugin.settings.settingsCurrentlyReadingURL = value
              yield this.plugin.saveSettings()
            })
          )
      )
    new obsidian.Setting(containerEl)
      .setName('Read URL')
      .setDesc(
        'You can find the RSS feed at the bottom of your Goodreads shelf.'
      )
      .addText(text =>
        text
          .setPlaceholder('Read RSS URL')
          .setValue(this.plugin.settings.settingsReadURL)
          .onChange(value =>
            __awaiter(this, void 0, void 0, function* () {
              console.log(`Changed currently-reading url to: ${value}`)
              this.plugin.settings.settingsReadURL = value
              yield this.plugin.saveSettings()
            })
          )
      )
  }
}

class Goodsidian extends obsidian.Plugin {
  onload() {
    return __awaiter(this, void 0, void 0, function* () {
      console.log('loading my test plugin')
      yield this.loadSettings()
      // Add icon in sidebar
      this.addRibbonIcon('dice', 'Sample Plugin', () => {
        new obsidian.Notice('This is a notice!')
      })
      // Write text in status bar
      this.addStatusBarItem().setText('Goodsidian yeah!')
      // Add a command in command palette (also hotkey-able)
      this.addCommand({
        id: 'open-sample-modal',
        name: 'Open Sample Modal',
        checkCallback: checking => {
          let leaf = this.app.workspace.activeLeaf
          if (leaf) {
            if (!checking) {
              new SampleModal(this.app).open()
            }
            return true
          }
          return false
        }
      })
      // Fetch frontmatter by command pallette
      this.addCommand({
        id: 'fetch-frontmatter',
        name: 'Fetch frontmatter',
        checkCallback: checking => {
          let leaf = this.app.workspace.activeLeaf
          if (leaf) {
            if (!checking) {
              const currentlyOpenFile = this.app.workspace.getActiveFile()
              if (currentlyOpenFile instanceof obsidian.TFile) {
                // Set arrays and variables
                let tags = obsidian.getAllTags(
                  this.app.metadataCache.getFileCache(currentlyOpenFile)
                )
                var patt = new RegExp('book')
                var booktag = false
                // Set booktag variable to true or false depending if tags contain 'book'
                for (var i = 0; i < tags.length; i++) {
                  patt.test(tags[i])
                  if (patt.test(tags[i])) {
                    var booktag = true
                  }
                }
                // Print depending on 'book' being present in note
                if (booktag) {
                  console.log('Book tag present in note.')
                } else {
                  console.log('Book tag not present.')
                }
                // Print bookid
                console.log(
                  this.app.metadataCache.getFileCache(currentlyOpenFile)
                    .frontmatter.bookid
                )
              }
            }
            return true
          }
          return false
        }
      })
      this.addSettingTab(new SampleSettingTab(this.app, this))
      this.registerCodeMirror(cm => {
        console.log('codemirror', cm)
      })
      this.registerInterval(
        window.setInterval(() => console.log('setInterval'), 5 * 60 * 1000)
      )
    })
  }
  onunload() {
    console.log('Goodsidian unloaded!')
  }
  loadSettings() {
    return __awaiter(this, void 0, void 0, function* () {
      this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData())
    })
  }
  saveSettings() {
    return __awaiter(this, void 0, void 0, function* () {
      yield this.saveData(this.settings)
    })
  }
}

module.exports = Goodsidian
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
