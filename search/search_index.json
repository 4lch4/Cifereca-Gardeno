{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Home \u00b6 First off, welcome to my Digital Garden! If this is your first time hearing of a Digital Garden, I find the following quote to be one of the best definitions/descriptions I've come across: A digital garden is an online space at the intersection of a notebook and a blog, where digital gardeners share seeds of thoughts to be cultivated in public. Contrary to a blog, where articles and essays have a publication date and start decaying as soon as they are published, a digital garden is evergreen: digital gardeners keep on editing and refining their notes. How to set up your own digital garden / Anne-Laure Le Cunff / Ness Labs If you'd like more information, A Brief History & Ethos of the Digital Garden by Maggie Appleton was the article that initially got me started down this path. Sections \u00b6 Tags Notes","title":"Home"},{"location":"#home","text":"First off, welcome to my Digital Garden! If this is your first time hearing of a Digital Garden, I find the following quote to be one of the best definitions/descriptions I've come across: A digital garden is an online space at the intersection of a notebook and a blog, where digital gardeners share seeds of thoughts to be cultivated in public. Contrary to a blog, where articles and essays have a publication date and start decaying as soon as they are published, a digital garden is evergreen: digital gardeners keep on editing and refining their notes. How to set up your own digital garden / Anne-Laure Le Cunff / Ness Labs If you'd like more information, A Brief History & Ethos of the Digital Garden by Maggie Appleton was the article that initially got me started down this path.","title":"Home"},{"location":"#sections","text":"Tags Notes","title":"Sections"},{"location":"Tags/","text":"Tags \u00b6 Following is a list of relevant tags: API \u00b6 HTTP Status Codes RESTful API Intro Over HTTP Schema Visual Development \u00b6 Extensions Shortcuts pm2 GraphQL \u00b6 Intro Over HTTP Schema Visual Index \u00b6 Index Index Index Index Index Index Software \u00b6 Index Extensions Shortcuts ADB Homebrew bash cron curl Software/App \u00b6 Index Extensions Shortcuts Software/Apps \u00b6 Index Software/CLI \u00b6 Index ADB Doppler Homebrew bash cron curl httpie pm2 tmux zsh Software/Packages \u00b6 Index Cosmiconfig DotEnv Index Intro Tools/API \u00b6 Index Intro Tools/Config \u00b6 Doppler Cosmiconfig DotEnv Tools/HTTP \u00b6 Index Intro","title":"Tags"},{"location":"Tags/#tags","text":"Following is a list of relevant tags:","title":"Tags"},{"location":"Tags/#api","text":"HTTP Status Codes RESTful API Intro Over HTTP Schema Visual","title":"API"},{"location":"Tags/#development","text":"Extensions Shortcuts pm2","title":"Development"},{"location":"Tags/#graphql","text":"Intro Over HTTP Schema Visual","title":"GraphQL"},{"location":"Tags/#index","text":"Index Index Index Index Index Index","title":"Index"},{"location":"Tags/#software","text":"Index Extensions Shortcuts ADB Homebrew bash cron curl","title":"Software"},{"location":"Tags/#softwareapp","text":"Index Extensions Shortcuts","title":"Software/App"},{"location":"Tags/#softwareapps","text":"Index","title":"Software/Apps"},{"location":"Tags/#softwarecli","text":"Index ADB Doppler Homebrew bash cron curl httpie pm2 tmux zsh","title":"Software/CLI"},{"location":"Tags/#softwarepackages","text":"Index Cosmiconfig DotEnv Index Intro","title":"Software/Packages"},{"location":"Tags/#toolsapi","text":"Index Intro","title":"Tools/API"},{"location":"Tags/#toolsconfig","text":"Doppler Cosmiconfig DotEnv","title":"Tools/Config"},{"location":"Tags/#toolshttp","text":"Index Intro","title":"Tools/HTTP"},{"location":"notes/","tags":["Index"],"text":"Index \u00b6 This section is where I store all of my public notes/cheatsheets. Some of them have been pulled from existing sources and will have a link to their original source.","title":"Index"},{"location":"notes/#index","text":"This section is where I store all of my public notes/cheatsheets. Some of them have been pulled from existing sources and will have a link to their original source.","title":"Index"},{"location":"notes/API/","tags":["Index"],"text":"Index \u00b6 This section contains notes related to the development & operation of an API, usually a RESTful API: HTTP Status Codes RESTful API GraphQL","title":"Index"},{"location":"notes/API/#index","text":"This section contains notes related to the development & operation of an API, usually a RESTful API: HTTP Status Codes RESTful API GraphQL","title":"Index"},{"location":"notes/API/HTTP-Status/","tags":["API"],"text":"HTTP Status Codes \u00b6 This page provides tables of the available status codes when dealing with HTTP requests with links to further details either on Wikipedia or httpstatuses.com . Informational Responses \u00b6 Code Name Further Details 100 Continue httpstatuses.com/100 101 Switching Protocols httpstatuses.com/101 Success Responses \u00b6 Code Name Further Details 200 OK httpstatuses.com/200 201 Created httpstatuses.com/201 202 Accepted httpstatuses.com/202 203 Non-Authoritive Information httpstatuses.com/203 204 No Content httpstatuses.com/204 205 Reset Content httpstatuses.com/205 206 Partial Content httpstatuses.com/206 226 IM Used httpstatuses.com/226 Redirection Responses \u00b6 Code Name Further Details 300 Multiple Choices httpstatuses.com/300 301 Moved Permanently httpstatuses.com/301 302 Found httpstatuses.com/302 303 See Other httpstatuses.com/303 304 Not Modified httpstatuses.com/304 305 Use Proxy httpstatuses.com/305 306 Switch Proxy httpstatusdogs.com/306 307 Temporary Redirect httpstatuses.com/307 308 Permanent Redirect httpstatuses.com/308 Client Error Responses \u00b6 Code Name Further Details 400 Bad Request httpstatuses.com/400 401 Unauthorized httpstatuses.com/401 402 Payment Required httpstatuses.com/402 403 Forbidden httpstatuses.com/403 404 Not Found httpstatuses.com/404 405 Method Not Allowed httpstatuses.com/405 406 Not Acceptable httpstatuses.com/406 407 Proxy Authentication Required httpstatuses.com/407 408 Request Timeout httpstatuses.com/408 409 Conflict httpstatuses.com/409 410 Gone httpstatuses.com/410 411 Length Required httpstatuses.com/411 412 Precondition Failed httpstatuses.com/412 413 Payload Too Large httpstatuses.com/413 414 URI Too Long httpstatuses.com/414 415 Unsupported Media Type httpstatuses.com/415 416 Range Not Satisfiable httpstatuses.com/416 417 Expectation Failed httpstatuses.com/417 418 I'm a teapot httpstatuses.com/418 421 Misdirected Request httpstatuses.com/421 426 Upgrade Required httpstatuses.com/426 428 Precondition Required httpstatuses.com/428 429 Too Many Requests httpstatuses.com/429 431 Request Header Fields Too Large httpstatuses.com/431 451 Unavailable For Legal Reasons httpstatuses.com/451 Server Error Responses \u00b6 Code Name Further Details 500 Internal Server Error httpstatuses.com/500 501 Not Implemented httpstatuses.com/501 502 Bad Gateway httpstatuses.com/502 503 Service Unavailable httpstatuses.com/503 504 Gateway Timeout httpstatuses.com/504 505 HTTP Version Not Supported httpstatuses.com/505 506 Variant Also Negotiates httpstatuses.com/506 510 Not Extended httpstatuses.com/510 511 Network Authentication Required httpstatuses.com/511 WebDAV Status Codes \u00b6 WebDAV is an extension of HTTP that allows clients to perform remote Web content authoring operations. It provides a framework for users to create, change and move documents on a server. It adds the following status codes on top of HTTP. Read more. Code Name Further Details 102 Processing wikipedia.org/List_of_HTTP_status_codes#102 207 Multi-Status wikipedia.org/List_of_HTTP_status_codes#207 208 Already Reported wikipedia.org/List_of_HTTP_status_codes#208 422 Unprocessable Entity wikipedia.org/List_of_HTTP_status_codes#422 423 Locked wikipedia.org/List_of_HTTP_status_codes#423 424 Failed Dependency wikipedia.org/List_of_HTTP_status_codes#424 507 Insufficient Storage wikipedia.org/List_of_HTTP_status_codes#507 508 Loop Detected wikipedia.org/List_of_HTTP_status_codes#508 Also see \u00b6 https://en.wikipedia.org/wiki/List_of_HTTP_status_codes https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html https://httpstatuses.com/","title":"HTTP Status Codes"},{"location":"notes/API/HTTP-Status/#http-status-codes","text":"This page provides tables of the available status codes when dealing with HTTP requests with links to further details either on Wikipedia or httpstatuses.com .","title":"HTTP Status Codes"},{"location":"notes/API/HTTP-Status/#informational-responses","text":"Code Name Further Details 100 Continue httpstatuses.com/100 101 Switching Protocols httpstatuses.com/101","title":"Informational Responses"},{"location":"notes/API/HTTP-Status/#success-responses","text":"Code Name Further Details 200 OK httpstatuses.com/200 201 Created httpstatuses.com/201 202 Accepted httpstatuses.com/202 203 Non-Authoritive Information httpstatuses.com/203 204 No Content httpstatuses.com/204 205 Reset Content httpstatuses.com/205 206 Partial Content httpstatuses.com/206 226 IM Used httpstatuses.com/226","title":"Success Responses"},{"location":"notes/API/HTTP-Status/#redirection-responses","text":"Code Name Further Details 300 Multiple Choices httpstatuses.com/300 301 Moved Permanently httpstatuses.com/301 302 Found httpstatuses.com/302 303 See Other httpstatuses.com/303 304 Not Modified httpstatuses.com/304 305 Use Proxy httpstatuses.com/305 306 Switch Proxy httpstatusdogs.com/306 307 Temporary Redirect httpstatuses.com/307 308 Permanent Redirect httpstatuses.com/308","title":"Redirection Responses"},{"location":"notes/API/HTTP-Status/#client-error-responses","text":"Code Name Further Details 400 Bad Request httpstatuses.com/400 401 Unauthorized httpstatuses.com/401 402 Payment Required httpstatuses.com/402 403 Forbidden httpstatuses.com/403 404 Not Found httpstatuses.com/404 405 Method Not Allowed httpstatuses.com/405 406 Not Acceptable httpstatuses.com/406 407 Proxy Authentication Required httpstatuses.com/407 408 Request Timeout httpstatuses.com/408 409 Conflict httpstatuses.com/409 410 Gone httpstatuses.com/410 411 Length Required httpstatuses.com/411 412 Precondition Failed httpstatuses.com/412 413 Payload Too Large httpstatuses.com/413 414 URI Too Long httpstatuses.com/414 415 Unsupported Media Type httpstatuses.com/415 416 Range Not Satisfiable httpstatuses.com/416 417 Expectation Failed httpstatuses.com/417 418 I'm a teapot httpstatuses.com/418 421 Misdirected Request httpstatuses.com/421 426 Upgrade Required httpstatuses.com/426 428 Precondition Required httpstatuses.com/428 429 Too Many Requests httpstatuses.com/429 431 Request Header Fields Too Large httpstatuses.com/431 451 Unavailable For Legal Reasons httpstatuses.com/451","title":"Client Error Responses"},{"location":"notes/API/HTTP-Status/#server-error-responses","text":"Code Name Further Details 500 Internal Server Error httpstatuses.com/500 501 Not Implemented httpstatuses.com/501 502 Bad Gateway httpstatuses.com/502 503 Service Unavailable httpstatuses.com/503 504 Gateway Timeout httpstatuses.com/504 505 HTTP Version Not Supported httpstatuses.com/505 506 Variant Also Negotiates httpstatuses.com/506 510 Not Extended httpstatuses.com/510 511 Network Authentication Required httpstatuses.com/511","title":"Server Error Responses"},{"location":"notes/API/HTTP-Status/#webdav-status-codes","text":"WebDAV is an extension of HTTP that allows clients to perform remote Web content authoring operations. It provides a framework for users to create, change and move documents on a server. It adds the following status codes on top of HTTP. Read more. Code Name Further Details 102 Processing wikipedia.org/List_of_HTTP_status_codes#102 207 Multi-Status wikipedia.org/List_of_HTTP_status_codes#207 208 Already Reported wikipedia.org/List_of_HTTP_status_codes#208 422 Unprocessable Entity wikipedia.org/List_of_HTTP_status_codes#422 423 Locked wikipedia.org/List_of_HTTP_status_codes#423 424 Failed Dependency wikipedia.org/List_of_HTTP_status_codes#424 507 Insufficient Storage wikipedia.org/List_of_HTTP_status_codes#507 508 Loop Detected wikipedia.org/List_of_HTTP_status_codes#508","title":"WebDAV Status Codes"},{"location":"notes/API/HTTP-Status/#also-see","text":"https://en.wikipedia.org/wiki/List_of_HTTP_status_codes https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html https://httpstatuses.com/","title":"Also see"},{"location":"notes/API/RESTful-API/","tags":["API"],"text":"RESTful API \u00b6 Status codes \u00b6 Code Description 200 OK Successful get, patch (return a JSON object) 201 Created Successful post (return a JSON object) 202 Accepted Successful post, delete, path - async 204 No content Successful delete 206 Partial content Successful get - async Error status \u00b6 Code Description 401 Unauthorized Not authenticated 403 Forbidden Authenticated, but no permissions 422 Unprocessable entity Validation Errors \u00b6 HTTP / 1.1 401 Unauthorized Content-Type : application/json { 'id' : 'au t h_ fa iled' , 'message' : \"You're not logged in.\" } Here's an example of a possible error reply. Versioning \u00b6 GET /api/foo Accept: application/json; version=1 You can pass a version=x to the Accept request header. Info here Authentication \u00b6 curl -is https:// $TOKEN @api.service.com/ Methods \u00b6 Request Description GET /articles/1 read, returns 200 PUT /articles/1 edit (or path), returns 200 DELETE /articles/1 delete, returns 200 POST /articles create, returns 201 GET /articles list, returns 200 References \u00b6 interagent/http-api-design (github.com)","title":"RESTful API"},{"location":"notes/API/RESTful-API/#restful-api","text":"","title":"RESTful API"},{"location":"notes/API/RESTful-API/#status-codes","text":"Code Description 200 OK Successful get, patch (return a JSON object) 201 Created Successful post (return a JSON object) 202 Accepted Successful post, delete, path - async 204 No content Successful delete 206 Partial content Successful get - async","title":"Status codes"},{"location":"notes/API/RESTful-API/#error-status","text":"Code Description 401 Unauthorized Not authenticated 403 Forbidden Authenticated, but no permissions 422 Unprocessable entity Validation","title":"Error status"},{"location":"notes/API/RESTful-API/#errors","text":"HTTP / 1.1 401 Unauthorized Content-Type : application/json { 'id' : 'au t h_ fa iled' , 'message' : \"You're not logged in.\" } Here's an example of a possible error reply.","title":"Errors"},{"location":"notes/API/RESTful-API/#versioning","text":"GET /api/foo Accept: application/json; version=1 You can pass a version=x to the Accept request header. Info here","title":"Versioning"},{"location":"notes/API/RESTful-API/#authentication","text":"curl -is https:// $TOKEN @api.service.com/","title":"Authentication"},{"location":"notes/API/RESTful-API/#methods","text":"Request Description GET /articles/1 read, returns 200 PUT /articles/1 edit (or path), returns 200 DELETE /articles/1 delete, returns 200 POST /articles create, returns 201 GET /articles list, returns 200","title":"Methods"},{"location":"notes/API/RESTful-API/#references","text":"interagent/http-api-design (github.com)","title":"References"},{"location":"notes/API/GraphQL/Intro/","tags":["API","GraphQL"],"text":"Intro \u00b6 Table of Contents \u00b6 Intro Table of Contents Queries Basic query Nesting Lists Lookups Aliases Operation names and variables Query Variables Mutations Query Variables Multiple types References Queries \u00b6 Basic query \u00b6 { status } { status: 'available' } Nesting \u00b6 { hero { name height } } { hero: { name: \"Luke Skywalker\", height: 1.74 } } Lists \u00b6 { friends { name } } { friends: [{ name: 'Luke Skywalker' }, { name: 'Han Solo' }, { name: 'R2D2' }] } GraphQL queries look the same for both single items or lists of items. Lookups \u00b6 { hero(id: \"1000\") { id name } } { hero: { id: \"1000\", { name: \"Luke Skywalker\" } } Aliases \u00b6 { luke: hero(id: \"1000\") { name } han: hero(id: \"1001\") { name } } { luke: { name: \"Luke Skywalker\" }, han: { name: \"Han Solo\" } } Operation names and variables \u00b6 Query \u00b6 query FindHero($id: String!) { hero(id: $id) { name } } Just to make things less ambiguous. Also, to use variables, you need an operation name. Variables \u00b6 { id: '1000' } Mutations \u00b6 Query \u00b6 { createReview($review) { id } } Variables \u00b6 { review: { stars: 5 } } { createReview: { id: 5291 } } Mutations are just fields that do something when queried. Multiple types \u00b6 { search(q: \"john\") { id ... on User { name } ... on Comment { body author { name } } } } Great for searching. References \u00b6 http://graphql.org/learn/queries/","title":"Intro"},{"location":"notes/API/GraphQL/Intro/#intro","text":"","title":"Intro"},{"location":"notes/API/GraphQL/Intro/#table-of-contents","text":"Intro Table of Contents Queries Basic query Nesting Lists Lookups Aliases Operation names and variables Query Variables Mutations Query Variables Multiple types References","title":"Table of Contents"},{"location":"notes/API/GraphQL/Intro/#queries","text":"","title":"Queries"},{"location":"notes/API/GraphQL/Intro/#basic-query","text":"{ status } { status: 'available' }","title":"Basic query"},{"location":"notes/API/GraphQL/Intro/#nesting","text":"{ hero { name height } } { hero: { name: \"Luke Skywalker\", height: 1.74 } }","title":"Nesting"},{"location":"notes/API/GraphQL/Intro/#lists","text":"{ friends { name } } { friends: [{ name: 'Luke Skywalker' }, { name: 'Han Solo' }, { name: 'R2D2' }] } GraphQL queries look the same for both single items or lists of items.","title":"Lists"},{"location":"notes/API/GraphQL/Intro/#lookups","text":"{ hero(id: \"1000\") { id name } } { hero: { id: \"1000\", { name: \"Luke Skywalker\" } }","title":"Lookups"},{"location":"notes/API/GraphQL/Intro/#aliases","text":"{ luke: hero(id: \"1000\") { name } han: hero(id: \"1001\") { name } } { luke: { name: \"Luke Skywalker\" }, han: { name: \"Han Solo\" } }","title":"Aliases"},{"location":"notes/API/GraphQL/Intro/#operation-names-and-variables","text":"","title":"Operation names and variables"},{"location":"notes/API/GraphQL/Intro/#query","text":"query FindHero($id: String!) { hero(id: $id) { name } } Just to make things less ambiguous. Also, to use variables, you need an operation name.","title":"Query"},{"location":"notes/API/GraphQL/Intro/#variables","text":"{ id: '1000' }","title":"Variables"},{"location":"notes/API/GraphQL/Intro/#mutations","text":"","title":"Mutations"},{"location":"notes/API/GraphQL/Intro/#query_1","text":"{ createReview($review) { id } }","title":"Query"},{"location":"notes/API/GraphQL/Intro/#variables_1","text":"{ review: { stars: 5 } } { createReview: { id: 5291 } } Mutations are just fields that do something when queried.","title":"Variables"},{"location":"notes/API/GraphQL/Intro/#multiple-types","text":"{ search(q: \"john\") { id ... on User { name } ... on Comment { body author { name } } } } Great for searching.","title":"Multiple types"},{"location":"notes/API/GraphQL/Intro/#references","text":"http://graphql.org/learn/queries/","title":"References"},{"location":"notes/API/GraphQL/Over-HTTP/","tags":["API","GraphQL"],"text":"Over HTTP \u00b6 GET \u00b6 fetch ( 'http://myapi/graphql?query={ me { name } }' ) POST \u00b6 fetch ( 'http://myapi/graphql' , { body : JSON . stringify ({ query : '...' , operationName : '...' , variables : { ... } }) })","title":"Over HTTP"},{"location":"notes/API/GraphQL/Over-HTTP/#over-http","text":"","title":"Over HTTP"},{"location":"notes/API/GraphQL/Over-HTTP/#get","text":"fetch ( 'http://myapi/graphql?query={ me { name } }' )","title":"GET"},{"location":"notes/API/GraphQL/Over-HTTP/#post","text":"fetch ( 'http://myapi/graphql' , { body : JSON . stringify ({ query : '...' , operationName : '...' , variables : { ... } }) })","title":"POST"},{"location":"notes/API/GraphQL/Schema/","tags":["API","GraphQL"],"text":"Schema \u00b6 Basic schemas \u00b6 type Query { me : User users ( limit : Int ) : [ User ] } type User { id : ID ! name : String } See: sogko/graphql-shorthand-notation-cheat-sheet Built in types \u00b6 Scalar types \u00b6 | Int | Integer | | Float | Float | | String | String | | Boolean | Boolean | | ID | ID | Type definitions \u00b6 | scalar | Scalar type | | type | Object type | | interface | Interface type | | union | Union type | | enum | Enumerable type | | input | Input object type | Type modifiers \u00b6 | String | Nullable string | | String! | Required string | | [String] | List of strings | | [String]! | Required list of strings | | [String!]! | Required list of required strings | Mutations \u00b6 type Mutation { users ( params : ListUsersInput ) [ User ] ! } Interfaces \u00b6 interface Entity { id : ID ! } type User implements Entity { id : ID ! name : String } Enums \u00b6 enum DIRECTION { LEFT RIGHT } type Root { direction : DIRECTION ! } Unions \u00b6 type Artist { \u00b7\u00b7\u00b7 } type Album { \u00b7\u00b7\u00b7 } union Result = Artist | Album type Query { search ( q : String ) [ Result ] } References \u00b6 http://graphql.org/learn/queries/ http://graphql.org/learn/serving-over-http/","title":"Schema"},{"location":"notes/API/GraphQL/Schema/#schema","text":"","title":"Schema"},{"location":"notes/API/GraphQL/Schema/#basic-schemas","text":"type Query { me : User users ( limit : Int ) : [ User ] } type User { id : ID ! name : String } See: sogko/graphql-shorthand-notation-cheat-sheet","title":"Basic schemas"},{"location":"notes/API/GraphQL/Schema/#built-in-types","text":"","title":"Built in types"},{"location":"notes/API/GraphQL/Schema/#scalar-types","text":"| Int | Integer | | Float | Float | | String | String | | Boolean | Boolean | | ID | ID |","title":"Scalar types"},{"location":"notes/API/GraphQL/Schema/#type-definitions","text":"| scalar | Scalar type | | type | Object type | | interface | Interface type | | union | Union type | | enum | Enumerable type | | input | Input object type |","title":"Type definitions"},{"location":"notes/API/GraphQL/Schema/#type-modifiers","text":"| String | Nullable string | | String! | Required string | | [String] | List of strings | | [String]! | Required list of strings | | [String!]! | Required list of required strings |","title":"Type modifiers"},{"location":"notes/API/GraphQL/Schema/#mutations","text":"type Mutation { users ( params : ListUsersInput ) [ User ] ! }","title":"Mutations"},{"location":"notes/API/GraphQL/Schema/#interfaces","text":"interface Entity { id : ID ! } type User implements Entity { id : ID ! name : String }","title":"Interfaces"},{"location":"notes/API/GraphQL/Schema/#enums","text":"enum DIRECTION { LEFT RIGHT } type Root { direction : DIRECTION ! }","title":"Enums"},{"location":"notes/API/GraphQL/Schema/#unions","text":"type Artist { \u00b7\u00b7\u00b7 } type Album { \u00b7\u00b7\u00b7 } union Result = Artist | Album type Query { search ( q : String ) [ Result ] }","title":"Unions"},{"location":"notes/API/GraphQL/Schema/#references","text":"http://graphql.org/learn/queries/ http://graphql.org/learn/serving-over-http/","title":"References"},{"location":"notes/API/GraphQL/Visual/","tags":["API","GraphQL"],"text":"Visual Cheatsheet \u00b6 A GraphQL Cheatsheet","title":"Visual"},{"location":"notes/API/GraphQL/Visual/#visual-cheatsheet","text":"A GraphQL Cheatsheet","title":"Visual Cheatsheet"},{"location":"notes/Software/","tags":["Index","Software"],"text":"Index \u00b6 This section contains notes/cheatsheets on various pieces of software (usually abbreviated as sw ) that I use: VSCode","title":"Index"},{"location":"notes/Software/#index","text":"This section contains notes/cheatsheets on various pieces of software (usually abbreviated as sw ) that I use: VSCode","title":"Index"},{"location":"notes/Software/Apps/","tags":["Software/Apps","Index"],"text":"Apps \u00b6 This section contains notes on various applications that I use, such as Visual Studio Code, Cyberduck, Alfred, etc. Visual Studio Code (VSCode)","title":"Index"},{"location":"notes/Software/Apps/#apps","text":"This section contains notes on various applications that I use, such as Visual Studio Code, Cyberduck, Alfred, etc. Visual Studio Code (VSCode)","title":"Apps"},{"location":"notes/Software/Apps/VSCode/","tags":["Software/App"],"text":"Visual Studio Code (VSCode) \u00b6 VSCode is a free IDE provided by Microsoft and is my editor of choice when it comes to writing, editing, debugging, code. With a fresh install it's got a rather lightweight footprint but is missing some features that developers have come to know and love in an IDE, which is where extensions come in. VSCode has an extremely active ecosystem for custom extensions that can help you solve damn near any problem you can imagine. This section of my Digital Garden provides notes on how to use, customize, tune, etc., an installation of VSCode. Key Links \u00b6 Homepage","title":"Index"},{"location":"notes/Software/Apps/VSCode/#visual-studio-code-vscode","text":"VSCode is a free IDE provided by Microsoft and is my editor of choice when it comes to writing, editing, debugging, code. With a fresh install it's got a rather lightweight footprint but is missing some features that developers have come to know and love in an IDE, which is where extensions come in. VSCode has an extremely active ecosystem for custom extensions that can help you solve damn near any problem you can imagine. This section of my Digital Garden provides notes on how to use, customize, tune, etc., an installation of VSCode.","title":"Visual Studio Code (VSCode)"},{"location":"notes/Software/Apps/VSCode/#key-links","text":"Homepage","title":"Key Links"},{"location":"notes/Software/Apps/VSCode/Extensions/","tags":["Software","Software/App","Development"],"text":"Extensions \u00b6 One of the best features of VSCode is the extensions it supports. This file provides info on some extensions that I can't live without. Name #region-Folding Better-Comments Cacher Code-Spell-Checker Colorize GitLens Image-Preview Markdown-All-in-One Markdown-PDF markdownlint Material-Icon-Theme Material-Product-Icons Paste-JSON-as-Code Polacode Prettier psioniq-File-Header Rainbow-CSV Remote-SSH Remote-Development Sort-JSON-Objects Sort-Lines SVG Version-Lens WakaTime YAML","title":"Extensions"},{"location":"notes/Software/Apps/VSCode/Extensions/#extensions","text":"One of the best features of VSCode is the extensions it supports. This file provides info on some extensions that I can't live without. Name #region-Folding Better-Comments Cacher Code-Spell-Checker Colorize GitLens Image-Preview Markdown-All-in-One Markdown-PDF markdownlint Material-Icon-Theme Material-Product-Icons Paste-JSON-as-Code Polacode Prettier psioniq-File-Header Rainbow-CSV Remote-SSH Remote-Development Sort-JSON-Objects Sort-Lines SVG Version-Lens WakaTime YAML","title":"Extensions"},{"location":"notes/Software/Apps/VSCode/Shortcuts/","tags":["Software","Software/App","Development"],"text":"Shortcuts \u00b6 Command palette \u00b6 Key Description \u21e7\u2318P Show all commands \u2318P Show files Sidebars \u00b6 Key Description \u2318B Toggle sidebar ---- ---- \u21e7\u2318E Explorer \u21e7\u2318F Search \u21e7\u2318D Debug \u21e7\u2318X Extensions \u21e7^G Git (SCM) Search \u00b6 Key Description \u2318F Find \u2325\u2318F Replace ---- ---- \u21e7\u2318F Find in files \u21e7\u2318H Replace in files Panel \u00b6 Key Description \u2318J Toggle panel ---- ---- \u21e7\u2318M Problems \u21e7\u2318U Output \u21e7\u2318Y Debug console ^` Terminal View \u00b6 Key Description \u2318k z Zen mode ---- ---- \u2318k u Close unmodified \u2318k w Close all Debug \u00b6 Key Description F5 Start \u21e7F5 Stop \u21e7\u2318F5 Restart ---- ---- ^F5 Start without debugging ---- ---- F9 Toggle breakpoint ---- ---- F10 Step over F11 Step into \u21e7F11 Step out ---- ---- \u21e7\u2318D Debug sidebar \u21e7\u2318Y Debug panel References \u00b6 Keyboard shortcuts (MacOS) (code.visualstudio.com) Keyboard shortcuts (Windows) (code.visualstudio.com) Keyboard shortcuts (Linux) (code.visualstudio.com)","title":"Shortcuts"},{"location":"notes/Software/Apps/VSCode/Shortcuts/#shortcuts","text":"","title":"Shortcuts"},{"location":"notes/Software/Apps/VSCode/Shortcuts/#command-palette","text":"Key Description \u21e7\u2318P Show all commands \u2318P Show files","title":"Command palette"},{"location":"notes/Software/Apps/VSCode/Shortcuts/#sidebars","text":"Key Description \u2318B Toggle sidebar ---- ---- \u21e7\u2318E Explorer \u21e7\u2318F Search \u21e7\u2318D Debug \u21e7\u2318X Extensions \u21e7^G Git (SCM)","title":"Sidebars"},{"location":"notes/Software/Apps/VSCode/Shortcuts/#search","text":"Key Description \u2318F Find \u2325\u2318F Replace ---- ---- \u21e7\u2318F Find in files \u21e7\u2318H Replace in files","title":"Search"},{"location":"notes/Software/Apps/VSCode/Shortcuts/#panel","text":"Key Description \u2318J Toggle panel ---- ---- \u21e7\u2318M Problems \u21e7\u2318U Output \u21e7\u2318Y Debug console ^` Terminal","title":"Panel"},{"location":"notes/Software/Apps/VSCode/Shortcuts/#view","text":"Key Description \u2318k z Zen mode ---- ---- \u2318k u Close unmodified \u2318k w Close all","title":"View"},{"location":"notes/Software/Apps/VSCode/Shortcuts/#debug","text":"Key Description F5 Start \u21e7F5 Stop \u21e7\u2318F5 Restart ---- ---- ^F5 Start without debugging ---- ---- F9 Toggle breakpoint ---- ---- F10 Step over F11 Step into \u21e7F11 Step out ---- ---- \u21e7\u2318D Debug sidebar \u21e7\u2318Y Debug panel","title":"Debug"},{"location":"notes/Software/Apps/VSCode/Shortcuts/#references","text":"Keyboard shortcuts (MacOS) (code.visualstudio.com) Keyboard shortcuts (Windows) (code.visualstudio.com) Keyboard shortcuts (Linux) (code.visualstudio.com)","title":"References"},{"location":"notes/Software/CLI/","tags":["Software/CLI","Index"],"text":"CLI \u00b6 This section contains notes on CLI software that I use. ADB bash cron curl Homebrew httpie pm2 tmux zsh","title":"Index"},{"location":"notes/Software/CLI/#cli","text":"This section contains notes on CLI software that I use. ADB bash cron curl Homebrew httpie pm2 tmux zsh","title":"CLI"},{"location":"notes/Software/CLI/ADB/","tags":["Software","Software/CLI"],"text":"ADB \u00b6 Info This note was originally found in the rstacrus/cheatsheets GitHub repository. Table of Contents \u00b6 ADB Table of Contents Device Basics Examples Logcat Examples File Management Examples Remote Shell Device Basics \u00b6 Command Description adb devices Lists connected devices adb devices -l Lists connected devices and kind --- --- adb root Restarts adbd with root permissions adb start-server Starts the adb server adb kill-server Kills the adb server adb remount Remounts file system with read/write access adb reboot Reboots the device adb reboot bootloader Reboots the device into fastboot adb disable-verity Reboots the device into fastboot wait-for-device can be specified after adb to ensure that the command will run once the device is connected. -s can be used to send the commands to a specific device when multiple are connected. Examples \u00b6 $ adb wait-for-device devices List of devices attached somedevice-1234 device someotherdevice-1234 device adb -s somedevice-1234 root Logcat \u00b6 Command Description adb logcat Starts printing log messages to stdout adb logcat -g Displays current log buffer sizes adb logcat -G <size> Sets the buffer size (K or M) adb logcat -c Clears the log buffers adb logcat *:V Enables ALL log messages (verbose) adb logcat -f <filename> Dumps to specified file Examples \u00b6 adb logcat -G 16M adb logcat *:V > output.log File Management \u00b6 Command Description adb push <local> <remote> Copies the local to the device at remote adb pull <remote> <local> Copies the remote from the device to local Examples \u00b6 echo \"This is a test\" > test.txt adb push test.txt /sdcard/test.txt adb pull /sdcard/test.txt pulledTest.txt Remote Shell \u00b6 Command Description adb shell <command> Runs the specified command on device (most unix commands work here) adb shell wm size Displays the current screen resolution adb shell wm size WxH Sets the resolution to WxH adb shell pm list packages Lists all installed packages adb shell pm list packages -3 Lists all installed 3 rd -party packages adb shell monkey -p app.package.name Starts the specified package","title":"ADB"},{"location":"notes/Software/CLI/ADB/#adb","text":"Info This note was originally found in the rstacrus/cheatsheets GitHub repository.","title":"ADB"},{"location":"notes/Software/CLI/ADB/#table-of-contents","text":"ADB Table of Contents Device Basics Examples Logcat Examples File Management Examples Remote Shell","title":"Table of Contents"},{"location":"notes/Software/CLI/ADB/#device-basics","text":"Command Description adb devices Lists connected devices adb devices -l Lists connected devices and kind --- --- adb root Restarts adbd with root permissions adb start-server Starts the adb server adb kill-server Kills the adb server adb remount Remounts file system with read/write access adb reboot Reboots the device adb reboot bootloader Reboots the device into fastboot adb disable-verity Reboots the device into fastboot wait-for-device can be specified after adb to ensure that the command will run once the device is connected. -s can be used to send the commands to a specific device when multiple are connected.","title":"Device Basics"},{"location":"notes/Software/CLI/ADB/#examples","text":"$ adb wait-for-device devices List of devices attached somedevice-1234 device someotherdevice-1234 device adb -s somedevice-1234 root","title":"Examples"},{"location":"notes/Software/CLI/ADB/#logcat","text":"Command Description adb logcat Starts printing log messages to stdout adb logcat -g Displays current log buffer sizes adb logcat -G <size> Sets the buffer size (K or M) adb logcat -c Clears the log buffers adb logcat *:V Enables ALL log messages (verbose) adb logcat -f <filename> Dumps to specified file","title":"Logcat"},{"location":"notes/Software/CLI/ADB/#examples_1","text":"adb logcat -G 16M adb logcat *:V > output.log","title":"Examples"},{"location":"notes/Software/CLI/ADB/#file-management","text":"Command Description adb push <local> <remote> Copies the local to the device at remote adb pull <remote> <local> Copies the remote from the device to local","title":"File Management"},{"location":"notes/Software/CLI/ADB/#examples_2","text":"echo \"This is a test\" > test.txt adb push test.txt /sdcard/test.txt adb pull /sdcard/test.txt pulledTest.txt","title":"Examples"},{"location":"notes/Software/CLI/ADB/#remote-shell","text":"Command Description adb shell <command> Runs the specified command on device (most unix commands work here) adb shell wm size Displays the current screen resolution adb shell wm size WxH Sets the resolution to WxH adb shell pm list packages Lists all installed packages adb shell pm list packages -3 Lists all installed 3 rd -party packages adb shell monkey -p app.package.name Starts the specified package","title":"Remote Shell"},{"location":"notes/Software/CLI/Doppler/","tags":["Software/CLI","Tools/Config"],"text":"Doppler \u00b6","title":"Doppler"},{"location":"notes/Software/CLI/Doppler/#doppler","text":"","title":"Doppler"},{"location":"notes/Software/CLI/Homebrew/","tags":["Software","Software/CLI"],"text":"Homebrew \u00b6 Info This note was originally found in the rstacrus/cheatsheets GitHub repository. Table of Contents \u00b6 Homebrew Table of Contents Commands More package commands Global commands Brew Cask commands Also see Commands \u00b6 Command Description brew install git Install a package brew upgrade git Upgrade a package --- --- brew unlink git Unlink brew link git Link brew switch git 2.5.0 Change versions --- --- brew list --versions git See what versions you have More package commands \u00b6 Command Description brew info git List versions, caveats, etc brew cleanup git Remove old versions brew edit git Edit this formula brew cat git Print this formula brew home git Open homepage Global commands \u00b6 Command Description brew update Update brew and cask brew list List installed brew outdated What's due for upgrades? Brew Cask commands \u00b6 Command Description brew cask install firefox Install the Firefox browser brew cask list List installed applications Cask commands are used for interacting with graphical applications. Also see \u00b6 Homebrew homepage brew.sh Homebrew docs docs.brew.sh","title":"Homebrew"},{"location":"notes/Software/CLI/Homebrew/#homebrew","text":"Info This note was originally found in the rstacrus/cheatsheets GitHub repository.","title":"Homebrew"},{"location":"notes/Software/CLI/Homebrew/#table-of-contents","text":"Homebrew Table of Contents Commands More package commands Global commands Brew Cask commands Also see","title":"Table of Contents"},{"location":"notes/Software/CLI/Homebrew/#commands","text":"Command Description brew install git Install a package brew upgrade git Upgrade a package --- --- brew unlink git Unlink brew link git Link brew switch git 2.5.0 Change versions --- --- brew list --versions git See what versions you have","title":"Commands"},{"location":"notes/Software/CLI/Homebrew/#more-package-commands","text":"Command Description brew info git List versions, caveats, etc brew cleanup git Remove old versions brew edit git Edit this formula brew cat git Print this formula brew home git Open homepage","title":"More package commands"},{"location":"notes/Software/CLI/Homebrew/#global-commands","text":"Command Description brew update Update brew and cask brew list List installed brew outdated What's due for upgrades?","title":"Global commands"},{"location":"notes/Software/CLI/Homebrew/#brew-cask-commands","text":"Command Description brew cask install firefox Install the Firefox browser brew cask list List installed applications Cask commands are used for interacting with graphical applications.","title":"Brew Cask commands"},{"location":"notes/Software/CLI/Homebrew/#also-see","text":"Homebrew homepage brew.sh Homebrew docs docs.brew.sh","title":"Also see"},{"location":"notes/Software/CLI/bash/","tags":["Software","Software/CLI"],"text":"bash \u00b6 Info This note was originally found in the rstacrus/cheatsheets GitHub repository. Table of Contents \u00b6 bash Table of Contents Getting started Example Variables String quotes Shell execution Conditional execution Functions Conditionals Strict mode Brace expansion Parameter expansions Basics Substitution Comments Substrings Length Manipulation Default values Loops Basic for loop C-like for loop Ranges With step size Reading lines Forever Functions Defining functions Returning values Raising errors Arguments Conditionals Conditions File conditions Example Arrays Defining arrays Working with arrays Operations Iteration Dictionaries Defining Working with dictionaries Iteration Iterate over values Iterate over keys Options Options Glob options History Commands Expansions Operations Slices Miscellaneous Numeric calculations Subshells Redirection Inspecting commands Trap errors Case/switch Source relative printf Directory of script Getting options Heredoc Reading input Special variables Go to previous directory Check for command's result Grep check Also see Getting started \u00b6 Example \u00b6 #!/bin/bash NAME = \"John\" echo \"Hello $NAME !\" Variables \u00b6 NAME = \"John\" echo $NAME echo \" $NAME \" echo \" ${ NAME } !\" String quotes \u00b6 NAME = \"John\" echo \"Hi $NAME \" #=> Hi John echo 'Hi $NAME' #=> Hi $NAME Shell execution \u00b6 echo \"I'm in $( pwd ) \" echo \"I'm in `pwd`\" # Same See Command substitution Conditional execution \u00b6 git commit && git push git commit || echo \"Commit failed\" Functions \u00b6 get_name () { echo \"John\" } echo \"You are $( get_name ) \" See: Functions Conditionals \u00b6 if [[ -z \" $string \" ]] ; then echo \"String is empty\" elif [[ -n \" $string \" ]] ; then echo \"String is not empty\" fi See: Conditionals Strict mode \u00b6 set -euo pipefail IFS = $'\\n\\t' See: Unofficial bash strict mode Brace expansion \u00b6 echo { A,B } .js | {A,B} | Same as A B | | {A,B}.js | Same as A.js B.js | | {1..5} | Same as 1 2 3 4 5 | See: Brace expansion Parameter expansions \u00b6 Basics \u00b6 name = \"John\" echo ${ name } echo ${ name /J/j } #=> \"john\" (substitution) echo ${ name : 0 : 2 } #=> \"Jo\" (slicing) echo ${ name :: 2 } #=> \"Jo\" (slicing) echo ${ name : :- 1 } #=> \"Joh\" (slicing) echo ${ name :(-1) } #=> \"n\" (slicing from right) echo ${ name :(-2): 1 } #=> \"h\" (slicing from right) echo ${ food :- Cake } #=> $food or \"Cake\" length = 2 echo ${ name : 0 : length } #=> \"Jo\" See: Parameter expansion STR = \"/path/to/foo.cpp\" echo ${ STR %.cpp } # /path/to/foo echo ${ STR %.cpp } .o # /path/to/foo.o echo ${ STR ##*. } # cpp (extension) echo ${ STR ##*/ } # foo.cpp (basepath) echo ${ STR #*/ } # path/to/foo.cpp echo ${ STR ##*/ } # foo.cpp echo ${ STR /foo/bar } # /path/to/bar.cpp STR = \"Hello world\" echo ${ STR : 6 : 5 } # \"world\" echo ${ STR :- 5 : 5 } # \"world\" SRC = \"/path/to/foo.cpp\" BASE = ${ SRC ##*/ } #=> \"foo.cpp\" (basepath) DIR = ${ SRC % $BASE } #=> \"/path/to/\" (dirpath) Substitution \u00b6 Code Description ${FOO%suffix} Remove suffix ${FOO#prefix} Remove prefix --- --- ${FOO%%suffix} Remove long suffix ${FOO##prefix} Remove long prefix --- --- ${FOO/from/to} Replace first match ${FOO//from/to} Replace all --- --- ${FOO/%from/to} Replace suffix ${FOO/#from/to} Replace prefix Comments \u00b6 # Single line comment : ' This is a multi line comment ' Substrings \u00b6 | ${FOO:0:3} | Substring (position, length) | | ${FOO:-3:3} | Substring from the right | Length \u00b6 | ${#FOO} | Length of $FOO | Manipulation \u00b6 STR = \"HELLO WORLD!\" echo ${ STR , } #=> \"hELLO WORLD!\" (lowercase 1st letter) echo ${ STR ,, } #=> \"hello world!\" (all lowercase) STR = \"hello world!\" echo ${ STR ^ } #=> \"Hello world!\" (uppercase 1st letter) echo ${ STR ^^ } #=> \"HELLO WORLD!\" (all uppercase) Default values \u00b6 | ${FOO:-val} | $FOO , or val if not set | | ${FOO:=val} | Set $FOO to val if not set | | ${FOO:+val} | val if $FOO is set | | ${FOO:?message} | Show error message and exit if $FOO is not set | The : is optional (eg, ${FOO=word} works) Loops \u00b6 Basic for loop \u00b6 for i in /etc/rc.* ; do echo $i done C-like for loop \u00b6 for (( i = 0 ; i < 100 ; i++ )) ; do echo $i done Ranges \u00b6 for i in { 1 ..5 } ; do echo \"Welcome $i \" done With step size \u00b6 for i in { 5 ..50..5 } ; do echo \"Welcome $i \" done Reading lines \u00b6 < file.txt | while read line ; do echo $line done Forever \u00b6 while true ; do \u00b7\u00b7\u00b7 done Functions \u00b6 Defining functions \u00b6 myfunc () { echo \"hello $1 \" } # Same as above (alternate syntax) function myfunc () { echo \"hello $1 \" } myfunc \"John\" Returning values \u00b6 myfunc () { local myresult = 'some value' echo $myresult } result = \" $( myfunc ) \" Raising errors \u00b6 myfunc () { return 1 } if myfunc ; then echo \"success\" else echo \"failure\" fi Arguments \u00b6 Expression Description $# Number of arguments $* All arguments $@ All arguments, starting from first $1 First argument See Special parameters . Conditionals \u00b6 Conditions \u00b6 Note that [[ is actually a command/program that returns either 0 (true) or 1 (false). Any program that obeys the same logic (like all base utils, such as grep(1) or ping(1) ) can be used as condition, see examples. Condition Description [[ -z STRING ]] Empty string [[ -n STRING ]] Not empty string [[ STRING == STRING ]] Equal [[ STRING != STRING ]] Not Equal --- --- [[ NUM -eq NUM ]] Equal [[ NUM -ne NUM ]] Not equal [[ NUM -lt NUM ]] Less than [[ NUM -le NUM ]] Less than or equal [[ NUM -gt NUM ]] Greater than [[ NUM -ge NUM ]] Greater than or equal --- --- [[ STRING =~ STRING ]] Regexp --- --- (( NUM < NUM )) Numeric conditions | Condition | Description | | -------------------- | ------------------------ | ------ | --- | | [[ -o noclobber ]] | If OPTIONNAME is enabled | | --- | --- | | [[ ! EXPR ]] | Not | | [[ X ]] && [[ Y ]] | And | | [[X]] | | [[Y]] | Or | File conditions \u00b6 Condition Description [[ -e FILE ]] Exists [[ -r FILE ]] Readable [[ -h FILE ]] Symlink [[ -d FILE ]] Directory [[ -w FILE ]] Writable [[ -s FILE ]] Size is > 0 bytes [[ -f FILE ]] File [[ -x FILE ]] Executable --- --- [[ FILE1 -nt FILE2 ]] 1 is more recent than 2 [[ FILE1 -ot FILE2 ]] 2 is more recent than 1 [[ FILE1 -ef FILE2 ]] Same files Example \u00b6 # String if [[ -z \" $string \" ]] ; then echo \"String is empty\" elif [[ -n \" $string \" ]] ; then echo \"String is not empty\" fi # Combinations if [[ X ]] && [[ Y ]] ; then ... fi # Equal if [[ \" $A \" == \" $B \" ]] # Regex if [[ \"A\" = ~ \".\" ]] if (( $a < $b )) ; then echo \" $a is smaller than $b \" fi if [[ -e \"file.txt\" ]] ; then echo \"file exists\" fi Arrays \u00b6 Defining arrays \u00b6 Fruits =( 'Apple' 'Banana' 'Orange' ) Fruits [ 0 ]= \"Apple\" Fruits [ 1 ]= \"Banana\" Fruits [ 2 ]= \"Orange\" Working with arrays \u00b6 echo ${ Fruits [0] } # Element #0 echo ${ Fruits [@] } # All elements, space-separated echo ${# Fruits [@] } # Number of elements echo ${# Fruits } # String length of the 1st element echo ${# Fruits [3] } # String length of the Nth element echo ${ Fruits [@]: 3 : 2 } # Range (from position 3, length 2) Operations \u00b6 Fruits =( \" ${ Fruits [@] } \" \"Watermelon\" ) # Push Fruits +=( 'Watermelon' ) # Also Push Fruits =( ${ Fruits [@]/Ap*/ } ) # Remove by regex match unset Fruits [ 2 ] # Remove one item Fruits =( \" ${ Fruits [@] } \" ) # Duplicate Fruits =( \" ${ Fruits [@] } \" \" ${ Veggies [@] } \" ) # Concatenate lines =( ` cat \"logfile\" ` ) # Read from file Iteration \u00b6 for i in \" ${ arrayName [@] } \" ; do echo $i done Dictionaries \u00b6 Defining \u00b6 declare -A sounds sounds [ dog ]= \"bark\" sounds [ cow ]= \"moo\" sounds [ bird ]= \"tweet\" sounds [ wolf ]= \"howl\" Declares sound as a Dictionary object (aka associative array). Working with dictionaries \u00b6 echo ${ sounds [dog] } # Dog's sound echo ${ sounds [@] } # All values echo ${ !sounds[@] } # All keys echo ${# sounds [@] } # Number of elements unset sounds [ dog ] # Delete dog Iteration \u00b6 Iterate over values \u00b6 for val in \" ${ sounds [@] } \" ; do echo $val done Iterate over keys \u00b6 for key in \" ${ !sounds[@] } \" ; do echo $key done Options \u00b6 Options \u00b6 set -o noclobber # Avoid overlay files (echo \"hi\" > foo) set -o errexit # Used to exit upon error, avoiding cascading errors set -o pipefail # Unveils hidden failures set -o nounset # Exposes unset variables Glob options \u00b6 set -o nullglob # Non-matching globs are removed ('*.foo' => '') set -o failglob # Non-matching globs throw errors set -o nocaseglob # Case insensitive globs set -o globdots # Wildcards match dotfiles (\"*.sh\" => \".foo.sh\") set -o globstar # Allow ** for recursive matches ('lib/**/*.rb' => 'lib/a/b/c.rb') Set GLOBIGNORE as a colon-separated list of patterns to be removed from glob matches. History \u00b6 Commands \u00b6 | history | Show history | | shopt -s histverify | Don't execute expanded result immediately | Expansions \u00b6 | !$ | Expand last parameter of most recent command | | !* | Expand all parameters of most recent command | | !-n | Expand n th most recent command | | !n | Expand n th command in history | | !<command> | Expand most recent invocation of command <command> | Operations \u00b6 | !! | Execute last command again | | !!:s/<FROM>/<TO>/ | Replace first occurrence of <FROM> to <TO> in most recent command | | !!:gs/<FROM>/<TO>/ | Replace all occurrences of <FROM> to <TO> in most recent command | | !$:t | Expand only basename from last parameter of most recent command | | !$:h | Expand only directory from last parameter of most recent command | !! and !$ can be replaced with any valid expansion. Slices \u00b6 | !!:n | Expand only n th token from most recent command (command is 0 ; first argument is 1 ) | | !^ | Expand first argument from most recent command | | !$ | Expand last token from most recent command | | !!:n-m | Expand range of tokens from most recent command | | !!:n-$ | Expand n th token to last from most recent command | !! can be replaced with any valid expansion i.e. !cat , !-2 , !42 , etc. Miscellaneous \u00b6 Numeric calculations \u00b6 $(( a + 200 )) # Add 200 to $a $(( RANDOM% = 200 )) # Random number 0..200 Subshells \u00b6 ( cd somedir ; echo \"I'm now in $PWD \" ) pwd # still in first directory Redirection \u00b6 python hello.py > output.txt # stdout to (file) python hello.py >> output.txt # stdout to (file), append python hello.py 2 > error.log # stderr to (file) python hello.py 2 > & 1 # stderr to stdout python hello.py 2 >/dev/null # stderr to (null) python hello.py & >/dev/null # stdout and stderr to (null) python hello.py < foo.txt # feed foo.txt to stdin for python Inspecting commands \u00b6 command -V cd #=> \"cd is a function/alias/whatever\" Trap errors \u00b6 trap 'echo Error at about $LINENO' ERR or traperr () { echo \"ERROR: ${ BASH_SOURCE [1] } at about ${ BASH_LINENO [0] } \" } set -o errtrace trap traperr ERR Case/switch \u00b6 case \" $1 \" in start | up ) vagrant up ;; * ) echo \"Usage: $0 {start|stop|ssh}\" ;; esac Source relative \u00b6 source \" ${ 0 %/* } /../share/foo.sh\" printf \u00b6 printf \"Hello %s, I'm %s\" Sven Olga #=> \"Hello Sven, I'm Olga printf \"1 + 1 = %d\" 2 #=> \"1 + 1 = 2\" printf \"This is how you print a float: %f\" 2 #=> \"This is how you print a float: 2.000000\" Directory of script \u00b6 DIR = \" ${ 0 %/* } \" Getting options \u00b6 while [[ \" $1 \" = ~ ^- && ! \" $1 \" == \"--\" ]] ; do case $1 in -V | --version ) echo $version exit ;; -s | --string ) shift ; string = $1 ;; -f | --flag ) flag = 1 ;; esac ; shift ; done if [[ \" $1 \" == '--' ]] ; then shift ; fi Heredoc \u00b6 cat <<END hello world END Reading input \u00b6 echo -n \"Proceed? [y/n]: \" read ans echo $ans read -n 1 ans # Just one character Special variables \u00b6 | $? | Exit status of last task | | $! | PID of last background task | | $$ | PID of shell | | $0 | Filename of the shell script | See Special parameters . Go to previous directory \u00b6 pwd # /home/user/foo cd bar/ pwd # /home/user/foo/bar cd - pwd # /home/user/foo Check for command's result \u00b6 if ping -c 1 google.com ; then echo \"It appears you have a working internet connection\" fi Grep check \u00b6 if grep -q 'foo' ~/.bash_history ; then echo \"You appear to have typed 'foo' in the past\" fi Also see \u00b6 Bash-hackers wiki (bash-hackers.org) Shell vars (bash-hackers.org) Learn bash in y minutes (learnxinyminutes.com) Bash Guide (mywiki.wooledge.org) ShellCheck (shellcheck.net)","title":"bash"},{"location":"notes/Software/CLI/bash/#bash","text":"Info This note was originally found in the rstacrus/cheatsheets GitHub repository.","title":"bash"},{"location":"notes/Software/CLI/bash/#table-of-contents","text":"bash Table of Contents Getting started Example Variables String quotes Shell execution Conditional execution Functions Conditionals Strict mode Brace expansion Parameter expansions Basics Substitution Comments Substrings Length Manipulation Default values Loops Basic for loop C-like for loop Ranges With step size Reading lines Forever Functions Defining functions Returning values Raising errors Arguments Conditionals Conditions File conditions Example Arrays Defining arrays Working with arrays Operations Iteration Dictionaries Defining Working with dictionaries Iteration Iterate over values Iterate over keys Options Options Glob options History Commands Expansions Operations Slices Miscellaneous Numeric calculations Subshells Redirection Inspecting commands Trap errors Case/switch Source relative printf Directory of script Getting options Heredoc Reading input Special variables Go to previous directory Check for command's result Grep check Also see","title":"Table of Contents"},{"location":"notes/Software/CLI/bash/#getting-started","text":"","title":"Getting started"},{"location":"notes/Software/CLI/bash/#example","text":"#!/bin/bash NAME = \"John\" echo \"Hello $NAME !\"","title":"Example"},{"location":"notes/Software/CLI/bash/#variables","text":"NAME = \"John\" echo $NAME echo \" $NAME \" echo \" ${ NAME } !\"","title":"Variables"},{"location":"notes/Software/CLI/bash/#string-quotes","text":"NAME = \"John\" echo \"Hi $NAME \" #=> Hi John echo 'Hi $NAME' #=> Hi $NAME","title":"String quotes"},{"location":"notes/Software/CLI/bash/#shell-execution","text":"echo \"I'm in $( pwd ) \" echo \"I'm in `pwd`\" # Same See Command substitution","title":"Shell execution"},{"location":"notes/Software/CLI/bash/#conditional-execution","text":"git commit && git push git commit || echo \"Commit failed\"","title":"Conditional execution"},{"location":"notes/Software/CLI/bash/#functions","text":"get_name () { echo \"John\" } echo \"You are $( get_name ) \" See: Functions","title":"Functions"},{"location":"notes/Software/CLI/bash/#conditionals","text":"if [[ -z \" $string \" ]] ; then echo \"String is empty\" elif [[ -n \" $string \" ]] ; then echo \"String is not empty\" fi See: Conditionals","title":"Conditionals"},{"location":"notes/Software/CLI/bash/#strict-mode","text":"set -euo pipefail IFS = $'\\n\\t' See: Unofficial bash strict mode","title":"Strict mode"},{"location":"notes/Software/CLI/bash/#brace-expansion","text":"echo { A,B } .js | {A,B} | Same as A B | | {A,B}.js | Same as A.js B.js | | {1..5} | Same as 1 2 3 4 5 | See: Brace expansion","title":"Brace expansion"},{"location":"notes/Software/CLI/bash/#parameter-expansions","text":"","title":"Parameter expansions"},{"location":"notes/Software/CLI/bash/#basics","text":"name = \"John\" echo ${ name } echo ${ name /J/j } #=> \"john\" (substitution) echo ${ name : 0 : 2 } #=> \"Jo\" (slicing) echo ${ name :: 2 } #=> \"Jo\" (slicing) echo ${ name : :- 1 } #=> \"Joh\" (slicing) echo ${ name :(-1) } #=> \"n\" (slicing from right) echo ${ name :(-2): 1 } #=> \"h\" (slicing from right) echo ${ food :- Cake } #=> $food or \"Cake\" length = 2 echo ${ name : 0 : length } #=> \"Jo\" See: Parameter expansion STR = \"/path/to/foo.cpp\" echo ${ STR %.cpp } # /path/to/foo echo ${ STR %.cpp } .o # /path/to/foo.o echo ${ STR ##*. } # cpp (extension) echo ${ STR ##*/ } # foo.cpp (basepath) echo ${ STR #*/ } # path/to/foo.cpp echo ${ STR ##*/ } # foo.cpp echo ${ STR /foo/bar } # /path/to/bar.cpp STR = \"Hello world\" echo ${ STR : 6 : 5 } # \"world\" echo ${ STR :- 5 : 5 } # \"world\" SRC = \"/path/to/foo.cpp\" BASE = ${ SRC ##*/ } #=> \"foo.cpp\" (basepath) DIR = ${ SRC % $BASE } #=> \"/path/to/\" (dirpath)","title":"Basics"},{"location":"notes/Software/CLI/bash/#substitution","text":"Code Description ${FOO%suffix} Remove suffix ${FOO#prefix} Remove prefix --- --- ${FOO%%suffix} Remove long suffix ${FOO##prefix} Remove long prefix --- --- ${FOO/from/to} Replace first match ${FOO//from/to} Replace all --- --- ${FOO/%from/to} Replace suffix ${FOO/#from/to} Replace prefix","title":"Substitution"},{"location":"notes/Software/CLI/bash/#comments","text":"# Single line comment : ' This is a multi line comment '","title":"Comments"},{"location":"notes/Software/CLI/bash/#substrings","text":"| ${FOO:0:3} | Substring (position, length) | | ${FOO:-3:3} | Substring from the right |","title":"Substrings"},{"location":"notes/Software/CLI/bash/#length","text":"| ${#FOO} | Length of $FOO |","title":"Length"},{"location":"notes/Software/CLI/bash/#manipulation","text":"STR = \"HELLO WORLD!\" echo ${ STR , } #=> \"hELLO WORLD!\" (lowercase 1st letter) echo ${ STR ,, } #=> \"hello world!\" (all lowercase) STR = \"hello world!\" echo ${ STR ^ } #=> \"Hello world!\" (uppercase 1st letter) echo ${ STR ^^ } #=> \"HELLO WORLD!\" (all uppercase)","title":"Manipulation"},{"location":"notes/Software/CLI/bash/#default-values","text":"| ${FOO:-val} | $FOO , or val if not set | | ${FOO:=val} | Set $FOO to val if not set | | ${FOO:+val} | val if $FOO is set | | ${FOO:?message} | Show error message and exit if $FOO is not set | The : is optional (eg, ${FOO=word} works)","title":"Default values"},{"location":"notes/Software/CLI/bash/#loops","text":"","title":"Loops"},{"location":"notes/Software/CLI/bash/#basic-for-loop","text":"for i in /etc/rc.* ; do echo $i done","title":"Basic for loop"},{"location":"notes/Software/CLI/bash/#c-like-for-loop","text":"for (( i = 0 ; i < 100 ; i++ )) ; do echo $i done","title":"C-like for loop"},{"location":"notes/Software/CLI/bash/#ranges","text":"for i in { 1 ..5 } ; do echo \"Welcome $i \" done","title":"Ranges"},{"location":"notes/Software/CLI/bash/#with-step-size","text":"for i in { 5 ..50..5 } ; do echo \"Welcome $i \" done","title":"With step size"},{"location":"notes/Software/CLI/bash/#reading-lines","text":"< file.txt | while read line ; do echo $line done","title":"Reading lines"},{"location":"notes/Software/CLI/bash/#forever","text":"while true ; do \u00b7\u00b7\u00b7 done","title":"Forever"},{"location":"notes/Software/CLI/bash/#functions_1","text":"","title":"Functions"},{"location":"notes/Software/CLI/bash/#defining-functions","text":"myfunc () { echo \"hello $1 \" } # Same as above (alternate syntax) function myfunc () { echo \"hello $1 \" } myfunc \"John\"","title":"Defining functions"},{"location":"notes/Software/CLI/bash/#returning-values","text":"myfunc () { local myresult = 'some value' echo $myresult } result = \" $( myfunc ) \"","title":"Returning values"},{"location":"notes/Software/CLI/bash/#raising-errors","text":"myfunc () { return 1 } if myfunc ; then echo \"success\" else echo \"failure\" fi","title":"Raising errors"},{"location":"notes/Software/CLI/bash/#arguments","text":"Expression Description $# Number of arguments $* All arguments $@ All arguments, starting from first $1 First argument See Special parameters .","title":"Arguments"},{"location":"notes/Software/CLI/bash/#conditionals_1","text":"","title":"Conditionals"},{"location":"notes/Software/CLI/bash/#conditions","text":"Note that [[ is actually a command/program that returns either 0 (true) or 1 (false). Any program that obeys the same logic (like all base utils, such as grep(1) or ping(1) ) can be used as condition, see examples. Condition Description [[ -z STRING ]] Empty string [[ -n STRING ]] Not empty string [[ STRING == STRING ]] Equal [[ STRING != STRING ]] Not Equal --- --- [[ NUM -eq NUM ]] Equal [[ NUM -ne NUM ]] Not equal [[ NUM -lt NUM ]] Less than [[ NUM -le NUM ]] Less than or equal [[ NUM -gt NUM ]] Greater than [[ NUM -ge NUM ]] Greater than or equal --- --- [[ STRING =~ STRING ]] Regexp --- --- (( NUM < NUM )) Numeric conditions | Condition | Description | | -------------------- | ------------------------ | ------ | --- | | [[ -o noclobber ]] | If OPTIONNAME is enabled | | --- | --- | | [[ ! EXPR ]] | Not | | [[ X ]] && [[ Y ]] | And | | [[X]] | | [[Y]] | Or |","title":"Conditions"},{"location":"notes/Software/CLI/bash/#file-conditions","text":"Condition Description [[ -e FILE ]] Exists [[ -r FILE ]] Readable [[ -h FILE ]] Symlink [[ -d FILE ]] Directory [[ -w FILE ]] Writable [[ -s FILE ]] Size is > 0 bytes [[ -f FILE ]] File [[ -x FILE ]] Executable --- --- [[ FILE1 -nt FILE2 ]] 1 is more recent than 2 [[ FILE1 -ot FILE2 ]] 2 is more recent than 1 [[ FILE1 -ef FILE2 ]] Same files","title":"File conditions"},{"location":"notes/Software/CLI/bash/#example_1","text":"# String if [[ -z \" $string \" ]] ; then echo \"String is empty\" elif [[ -n \" $string \" ]] ; then echo \"String is not empty\" fi # Combinations if [[ X ]] && [[ Y ]] ; then ... fi # Equal if [[ \" $A \" == \" $B \" ]] # Regex if [[ \"A\" = ~ \".\" ]] if (( $a < $b )) ; then echo \" $a is smaller than $b \" fi if [[ -e \"file.txt\" ]] ; then echo \"file exists\" fi","title":"Example"},{"location":"notes/Software/CLI/bash/#arrays","text":"","title":"Arrays"},{"location":"notes/Software/CLI/bash/#defining-arrays","text":"Fruits =( 'Apple' 'Banana' 'Orange' ) Fruits [ 0 ]= \"Apple\" Fruits [ 1 ]= \"Banana\" Fruits [ 2 ]= \"Orange\"","title":"Defining arrays"},{"location":"notes/Software/CLI/bash/#working-with-arrays","text":"echo ${ Fruits [0] } # Element #0 echo ${ Fruits [@] } # All elements, space-separated echo ${# Fruits [@] } # Number of elements echo ${# Fruits } # String length of the 1st element echo ${# Fruits [3] } # String length of the Nth element echo ${ Fruits [@]: 3 : 2 } # Range (from position 3, length 2)","title":"Working with arrays"},{"location":"notes/Software/CLI/bash/#operations","text":"Fruits =( \" ${ Fruits [@] } \" \"Watermelon\" ) # Push Fruits +=( 'Watermelon' ) # Also Push Fruits =( ${ Fruits [@]/Ap*/ } ) # Remove by regex match unset Fruits [ 2 ] # Remove one item Fruits =( \" ${ Fruits [@] } \" ) # Duplicate Fruits =( \" ${ Fruits [@] } \" \" ${ Veggies [@] } \" ) # Concatenate lines =( ` cat \"logfile\" ` ) # Read from file","title":"Operations"},{"location":"notes/Software/CLI/bash/#iteration","text":"for i in \" ${ arrayName [@] } \" ; do echo $i done","title":"Iteration"},{"location":"notes/Software/CLI/bash/#dictionaries","text":"","title":"Dictionaries"},{"location":"notes/Software/CLI/bash/#defining","text":"declare -A sounds sounds [ dog ]= \"bark\" sounds [ cow ]= \"moo\" sounds [ bird ]= \"tweet\" sounds [ wolf ]= \"howl\" Declares sound as a Dictionary object (aka associative array).","title":"Defining"},{"location":"notes/Software/CLI/bash/#working-with-dictionaries","text":"echo ${ sounds [dog] } # Dog's sound echo ${ sounds [@] } # All values echo ${ !sounds[@] } # All keys echo ${# sounds [@] } # Number of elements unset sounds [ dog ] # Delete dog","title":"Working with dictionaries"},{"location":"notes/Software/CLI/bash/#iteration_1","text":"","title":"Iteration"},{"location":"notes/Software/CLI/bash/#iterate-over-values","text":"for val in \" ${ sounds [@] } \" ; do echo $val done","title":"Iterate over values"},{"location":"notes/Software/CLI/bash/#iterate-over-keys","text":"for key in \" ${ !sounds[@] } \" ; do echo $key done","title":"Iterate over keys"},{"location":"notes/Software/CLI/bash/#options","text":"","title":"Options"},{"location":"notes/Software/CLI/bash/#options_1","text":"set -o noclobber # Avoid overlay files (echo \"hi\" > foo) set -o errexit # Used to exit upon error, avoiding cascading errors set -o pipefail # Unveils hidden failures set -o nounset # Exposes unset variables","title":"Options"},{"location":"notes/Software/CLI/bash/#glob-options","text":"set -o nullglob # Non-matching globs are removed ('*.foo' => '') set -o failglob # Non-matching globs throw errors set -o nocaseglob # Case insensitive globs set -o globdots # Wildcards match dotfiles (\"*.sh\" => \".foo.sh\") set -o globstar # Allow ** for recursive matches ('lib/**/*.rb' => 'lib/a/b/c.rb') Set GLOBIGNORE as a colon-separated list of patterns to be removed from glob matches.","title":"Glob options"},{"location":"notes/Software/CLI/bash/#history","text":"","title":"History"},{"location":"notes/Software/CLI/bash/#commands","text":"| history | Show history | | shopt -s histverify | Don't execute expanded result immediately |","title":"Commands"},{"location":"notes/Software/CLI/bash/#expansions","text":"| !$ | Expand last parameter of most recent command | | !* | Expand all parameters of most recent command | | !-n | Expand n th most recent command | | !n | Expand n th command in history | | !<command> | Expand most recent invocation of command <command> |","title":"Expansions"},{"location":"notes/Software/CLI/bash/#operations_1","text":"| !! | Execute last command again | | !!:s/<FROM>/<TO>/ | Replace first occurrence of <FROM> to <TO> in most recent command | | !!:gs/<FROM>/<TO>/ | Replace all occurrences of <FROM> to <TO> in most recent command | | !$:t | Expand only basename from last parameter of most recent command | | !$:h | Expand only directory from last parameter of most recent command | !! and !$ can be replaced with any valid expansion.","title":"Operations"},{"location":"notes/Software/CLI/bash/#slices","text":"| !!:n | Expand only n th token from most recent command (command is 0 ; first argument is 1 ) | | !^ | Expand first argument from most recent command | | !$ | Expand last token from most recent command | | !!:n-m | Expand range of tokens from most recent command | | !!:n-$ | Expand n th token to last from most recent command | !! can be replaced with any valid expansion i.e. !cat , !-2 , !42 , etc.","title":"Slices"},{"location":"notes/Software/CLI/bash/#miscellaneous","text":"","title":"Miscellaneous"},{"location":"notes/Software/CLI/bash/#numeric-calculations","text":"$(( a + 200 )) # Add 200 to $a $(( RANDOM% = 200 )) # Random number 0..200","title":"Numeric calculations"},{"location":"notes/Software/CLI/bash/#subshells","text":"( cd somedir ; echo \"I'm now in $PWD \" ) pwd # still in first directory","title":"Subshells"},{"location":"notes/Software/CLI/bash/#redirection","text":"python hello.py > output.txt # stdout to (file) python hello.py >> output.txt # stdout to (file), append python hello.py 2 > error.log # stderr to (file) python hello.py 2 > & 1 # stderr to stdout python hello.py 2 >/dev/null # stderr to (null) python hello.py & >/dev/null # stdout and stderr to (null) python hello.py < foo.txt # feed foo.txt to stdin for python","title":"Redirection"},{"location":"notes/Software/CLI/bash/#inspecting-commands","text":"command -V cd #=> \"cd is a function/alias/whatever\"","title":"Inspecting commands"},{"location":"notes/Software/CLI/bash/#trap-errors","text":"trap 'echo Error at about $LINENO' ERR or traperr () { echo \"ERROR: ${ BASH_SOURCE [1] } at about ${ BASH_LINENO [0] } \" } set -o errtrace trap traperr ERR","title":"Trap errors"},{"location":"notes/Software/CLI/bash/#caseswitch","text":"case \" $1 \" in start | up ) vagrant up ;; * ) echo \"Usage: $0 {start|stop|ssh}\" ;; esac","title":"Case/switch"},{"location":"notes/Software/CLI/bash/#source-relative","text":"source \" ${ 0 %/* } /../share/foo.sh\"","title":"Source relative"},{"location":"notes/Software/CLI/bash/#printf","text":"printf \"Hello %s, I'm %s\" Sven Olga #=> \"Hello Sven, I'm Olga printf \"1 + 1 = %d\" 2 #=> \"1 + 1 = 2\" printf \"This is how you print a float: %f\" 2 #=> \"This is how you print a float: 2.000000\"","title":"printf"},{"location":"notes/Software/CLI/bash/#directory-of-script","text":"DIR = \" ${ 0 %/* } \"","title":"Directory of script"},{"location":"notes/Software/CLI/bash/#getting-options","text":"while [[ \" $1 \" = ~ ^- && ! \" $1 \" == \"--\" ]] ; do case $1 in -V | --version ) echo $version exit ;; -s | --string ) shift ; string = $1 ;; -f | --flag ) flag = 1 ;; esac ; shift ; done if [[ \" $1 \" == '--' ]] ; then shift ; fi","title":"Getting options"},{"location":"notes/Software/CLI/bash/#heredoc","text":"cat <<END hello world END","title":"Heredoc"},{"location":"notes/Software/CLI/bash/#reading-input","text":"echo -n \"Proceed? [y/n]: \" read ans echo $ans read -n 1 ans # Just one character","title":"Reading input"},{"location":"notes/Software/CLI/bash/#special-variables","text":"| $? | Exit status of last task | | $! | PID of last background task | | $$ | PID of shell | | $0 | Filename of the shell script | See Special parameters .","title":"Special variables"},{"location":"notes/Software/CLI/bash/#go-to-previous-directory","text":"pwd # /home/user/foo cd bar/ pwd # /home/user/foo/bar cd - pwd # /home/user/foo","title":"Go to previous directory"},{"location":"notes/Software/CLI/bash/#check-for-commands-result","text":"if ping -c 1 google.com ; then echo \"It appears you have a working internet connection\" fi","title":"Check for command's result"},{"location":"notes/Software/CLI/bash/#grep-check","text":"if grep -q 'foo' ~/.bash_history ; then echo \"You appear to have typed 'foo' in the past\" fi","title":"Grep check"},{"location":"notes/Software/CLI/bash/#also-see","text":"Bash-hackers wiki (bash-hackers.org) Shell vars (bash-hackers.org) Learn bash in y minutes (learnxinyminutes.com) Bash Guide (mywiki.wooledge.org) ShellCheck (shellcheck.net)","title":"Also see"},{"location":"notes/Software/CLI/cron/","tags":["Software","Software/CLI"],"text":"Cron \u00b6 Info This note was originally found in the rstacrus/cheatsheets GitHub repository. Table of Contents \u00b6 Cron Table of Contents Format Examples Crontab Crontab Guru Format \u00b6 Min Hour Day Mon Weekday * * * * * command to be executed \u252c \u252c \u252c \u252c \u252c \u2502 \u2502 \u2502 \u2502 \u2514\u2500 Weekday (0=Sun .. 6=Sat) \u2502 \u2502 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500 Month (1..12) \u2502 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Day (1..31) \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Hour (0..23) \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Minute (0..59) Examples \u00b6 Example Description 0 * * * * every hour */15 * * * * every 15 mins 0 */2 * * * every 2 hours 0 0 * * 0 every Sunday midnight --- --- @reboot every reboot Crontab \u00b6 # Adding tasks easily echo \"@reboot echo hi\" | crontab # Open in editor crontab -e # List tasks crontab -l [ -u user ] Crontab Guru \u00b6 The Crontab Guru website is an amazing tool for easily building out cron expressions.","title":"cron"},{"location":"notes/Software/CLI/cron/#cron","text":"Info This note was originally found in the rstacrus/cheatsheets GitHub repository.","title":"Cron"},{"location":"notes/Software/CLI/cron/#table-of-contents","text":"Cron Table of Contents Format Examples Crontab Crontab Guru","title":"Table of Contents"},{"location":"notes/Software/CLI/cron/#format","text":"Min Hour Day Mon Weekday * * * * * command to be executed \u252c \u252c \u252c \u252c \u252c \u2502 \u2502 \u2502 \u2502 \u2514\u2500 Weekday (0=Sun .. 6=Sat) \u2502 \u2502 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500 Month (1..12) \u2502 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Day (1..31) \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Hour (0..23) \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Minute (0..59)","title":"Format"},{"location":"notes/Software/CLI/cron/#examples","text":"Example Description 0 * * * * every hour */15 * * * * every 15 mins 0 */2 * * * every 2 hours 0 0 * * 0 every Sunday midnight --- --- @reboot every reboot","title":"Examples"},{"location":"notes/Software/CLI/cron/#crontab","text":"# Adding tasks easily echo \"@reboot echo hi\" | crontab # Open in editor crontab -e # List tasks crontab -l [ -u user ]","title":"Crontab"},{"location":"notes/Software/CLI/cron/#crontab-guru","text":"The Crontab Guru website is an amazing tool for easily building out cron expressions.","title":"Crontab Guru"},{"location":"notes/Software/CLI/curl/","tags":["Software","Software/CLI"],"text":"curl \u00b6 Info This note was originally found in the rstacrus/cheatsheets GitHub repository. Table of Contents \u00b6 curl Table of Contents Options Request Data Headers SSL Examples Options \u00b6 -o <file> # --output: write to file -u user:pass # --user: Authentication -v # --verbose -vv # Even more verbose -s # --silent -I # --head: headers only Request \u00b6 -X POST # --request -L # follow link if page redirects Data \u00b6 -d 'data' # --data: HTTP post data, URL encoded (eg, status=\"Hello\") -d @file # --data via file -G # --get: send -d data via get Headers \u00b6 -A <str> # --user-agent -b name = val # --cookie -b FILE # --cookie -H \"X-Foo: y\" # --header --compressed # use deflate/gzip SSL \u00b6 --cacert <file> --capath <dir> -E, --cert <cert> # --cert: Client cert file --cert-type # der/pem/eng -k, --insecure # for self-signed certs Examples \u00b6 # Post data: curl -d password = x http://x.com/y # Auth/data: curl -u user:pass -d status = \"Hello\" http://twitter.com/statuses/update.xml # multipart file upload curl -v -include --form key1 = value1 --form upload = @localfilename URL","title":"curl"},{"location":"notes/Software/CLI/curl/#curl","text":"Info This note was originally found in the rstacrus/cheatsheets GitHub repository.","title":"curl"},{"location":"notes/Software/CLI/curl/#table-of-contents","text":"curl Table of Contents Options Request Data Headers SSL Examples","title":"Table of Contents"},{"location":"notes/Software/CLI/curl/#options","text":"-o <file> # --output: write to file -u user:pass # --user: Authentication -v # --verbose -vv # Even more verbose -s # --silent -I # --head: headers only","title":"Options"},{"location":"notes/Software/CLI/curl/#request","text":"-X POST # --request -L # follow link if page redirects","title":"Request"},{"location":"notes/Software/CLI/curl/#data","text":"-d 'data' # --data: HTTP post data, URL encoded (eg, status=\"Hello\") -d @file # --data via file -G # --get: send -d data via get","title":"Data"},{"location":"notes/Software/CLI/curl/#headers","text":"-A <str> # --user-agent -b name = val # --cookie -b FILE # --cookie -H \"X-Foo: y\" # --header --compressed # use deflate/gzip","title":"Headers"},{"location":"notes/Software/CLI/curl/#ssl","text":"--cacert <file> --capath <dir> -E, --cert <cert> # --cert: Client cert file --cert-type # der/pem/eng -k, --insecure # for self-signed certs","title":"SSL"},{"location":"notes/Software/CLI/curl/#examples","text":"# Post data: curl -d password = x http://x.com/y # Auth/data: curl -u user:pass -d status = \"Hello\" http://twitter.com/statuses/update.xml # multipart file upload curl -v -include --form key1 = value1 --form upload = @localfilename URL","title":"Examples"},{"location":"notes/Software/CLI/httpie/","tags":["Software/CLI"],"text":"httpie \u00b6 A simple yet powerful command-line HTTP and API testing client for the API era. Info This note was originally found in the rstacrus/cheatsheets GitHub repository. Table of Contents \u00b6 httpie Table of Contents Parameters Forms Options Authentication Session Downloading Others References Parameters \u00b6 $ http POST http://example.com/posts/3 \\ Origin:example.com \\ # : HTTP headers name = \"John Doe\" \\ # = string q == \"search\" \\ # == URL parameters (?q=search) age: = 29 \\ # := for non-strings list: = '[1,3,4]' \\ # := json file@file.bin \\ # @ attach file token = @token.txt \\ # =@ read from file (text) user: = @user.json # :=@ read from file (json) Forms \u00b6 $ http --form POST example.com \\ name = \"John Smith\" \\ cv = @document.txt Options \u00b6 Print options: -v, --verbose # same as --print=HhBb --all -h, --headers # same as --print=h -b, --body # same as --print=b --all # print intermediate requests --print = HhBb # H: request headers # B: request body # h: response headers # b: response body --pretty = none # all | colors | format --json | -j # Response is serialized as a JSON object. Authentication \u00b6 --session NAME -a, --auth USER:PASS --auth-type basic --auth-type digest Session \u00b6 --session NAME # store auth and cookies --session-read-only NAME Downloading \u00b6 -d, --download # like wget -c, --continue -o, --output FILE Others \u00b6 -F, --follow # follow redirects --max-redirects N # maximum for --follow --timeout SECONDS --verify no # skip SSL verification --proxy http:http://foo.bar:3128 References \u00b6 https://github.com/jakubroztocil/httpie","title":"httpie"},{"location":"notes/Software/CLI/httpie/#httpie","text":"A simple yet powerful command-line HTTP and API testing client for the API era. Info This note was originally found in the rstacrus/cheatsheets GitHub repository.","title":"httpie"},{"location":"notes/Software/CLI/httpie/#table-of-contents","text":"httpie Table of Contents Parameters Forms Options Authentication Session Downloading Others References","title":"Table of Contents"},{"location":"notes/Software/CLI/httpie/#parameters","text":"$ http POST http://example.com/posts/3 \\ Origin:example.com \\ # : HTTP headers name = \"John Doe\" \\ # = string q == \"search\" \\ # == URL parameters (?q=search) age: = 29 \\ # := for non-strings list: = '[1,3,4]' \\ # := json file@file.bin \\ # @ attach file token = @token.txt \\ # =@ read from file (text) user: = @user.json # :=@ read from file (json)","title":"Parameters"},{"location":"notes/Software/CLI/httpie/#forms","text":"$ http --form POST example.com \\ name = \"John Smith\" \\ cv = @document.txt","title":"Forms"},{"location":"notes/Software/CLI/httpie/#options","text":"Print options: -v, --verbose # same as --print=HhBb --all -h, --headers # same as --print=h -b, --body # same as --print=b --all # print intermediate requests --print = HhBb # H: request headers # B: request body # h: response headers # b: response body --pretty = none # all | colors | format --json | -j # Response is serialized as a JSON object.","title":"Options"},{"location":"notes/Software/CLI/httpie/#authentication","text":"--session NAME -a, --auth USER:PASS --auth-type basic --auth-type digest","title":"Authentication"},{"location":"notes/Software/CLI/httpie/#session","text":"--session NAME # store auth and cookies --session-read-only NAME","title":"Session"},{"location":"notes/Software/CLI/httpie/#downloading","text":"-d, --download # like wget -c, --continue -o, --output FILE","title":"Downloading"},{"location":"notes/Software/CLI/httpie/#others","text":"-F, --follow # follow redirects --max-redirects N # maximum for --follow --timeout SECONDS --verify no # skip SSL verification --proxy http:http://foo.bar:3128","title":"Others"},{"location":"notes/Software/CLI/httpie/#references","text":"https://github.com/jakubroztocil/httpie","title":"References"},{"location":"notes/Software/CLI/pm2/","tags":["Software/CLI","Development"],"text":"PM2 \u00b6 PM2 is a daemon process manager that will help you manage and keep your application online 24/7. Info This note was originally found in the rstacrus/cheatsheets GitHub repository. Table of Contents \u00b6 PM2 Table of Contents Basic CLI Usage Fork mode Cluster mode Listing Logs Actions Misc Ecosystem File Overview Simple Config Multiple Applications CLI Management of Application Manage All At Once Manage Specific Applications Switching Environments Basic CLI Usage \u00b6 Fork mode \u00b6 Command Description pm2 start app.js --name my-api Start and name a process Cluster mode \u00b6 Command Description pm2 start app.js -i 0 Will start maximum processes with LB depending on available CPUs pm2 start app.js -i max Same as above, but deprecated pm2 scale app +3 Scales app up by 3 workers pm2 scale app 2 Scales app up or down to 2 workers total Listing \u00b6 Command Description pm2 list Display all processes status pm2 jlist Print process list in raw JSON pm2 prettylist Print process list in beautified JSON --- --- pm2 describe 0 Display all information about a specific process --- --- pm2 monit Monitor all processes Logs \u00b6 Command Description pm2 logs [--raw] Display all processes logs in streaming pm2 flush Empty all log files pm2 reloadLogs Reload all logs Actions \u00b6 Command Description pm2 stop all Stop all processes pm2 restart all Restart all processes --- --- pm2 reload all Will 0s downtime reload (for NETWORKED apps) --- --- pm2 stop 0 Stop specific process id pm2 restart 0 Restart specific process id --- --- pm2 delete 0 Will remove process from pm2 list pm2 delete all Will remove all processes from pm2 list Misc \u00b6 Command Description pm2 reset <process> Reset meta data (restarted time...) pm2 updatePM2 Update in memory pm2 pm2 ping Ensure pm2 daemon has been launched pm2 sendSignal SIGUSR2 my-app Send system signal to script --- --- pm2 start app.js --no-daemon Run pm2 daemon in the foreground if it doesn't exist already pm2 start app.js --no-vizion Skip vizion features (versioning control) pm2 start app.js --no-autorestart Do not automatically restart app Ecosystem File \u00b6 Overview \u00b6 The ecosystem file tells PM2 how to run/manage your application to simplify working with it. The file by default is called ecosystem.config.js , but it can be called anything so long as it ends with .config.extension . It also supports JSON and YAML formats: Format Filename JavaScript ecosystem.config.js JSON ecosystem.config.json YAML ecosystem.config.yaml Simple Config \u00b6 pm2 ecosystem will generate a sample file to get you started, which can then be managed with pm2 [start|restart|stop|delete] ecosystem.config.js to start/restart/stop/delete the file: module . exports = { apps : [ { name : 'app' , script : './app.js' , env : { NODE_ENV : 'development' }, env_production : { NODE_ENV : 'production' } } ] } Multiple Applications \u00b6 module . exports = { apps : [ { name : 'worker' , script : './worker.js' , watch : true , env : { NODE_ENV : 'development' }, env_production : { NODE_ENV : 'production' } }, { name : 'api-app' , script : './api.js' , instances : 4 , exec_mode : 'cluster' } ] } CLI Management of Application \u00b6 Manage All At Once \u00b6 # Start all applications in file, if already running, they're restarted pm2 start ecosystem.config.js # Only start the app named worker-app pm2 start ecosystem.config.js --only worker-app # Stops all applications in file pm2 stop ecosystem.config.js # Restarts all applications in the file pm2 restart ecosystem.config.js # Reload all applications in the file pm2 reload ecosystem.config.js # Deletes all applications in the file pm2 delete ecosystem.config.js Manage Specific Applications \u00b6 pm2 start ecosystem.config.js --only api-app pm2 restart ecosystem.config.js --only api-app pm2 reload ecosystem.config.js --only api-app pm2 delete ecosystem.config.js --only api-app # Specific multiple applications pm2 start ecosystem.config.js --only \"api-app,worker-app\" Switching Environments \u00b6 # Start the app using the variables defined in env_production pm2 start ecosystem.config.js --env production # Restart the app using the variables defined in env_staging pm2 start ecosystem.config.js --env staging","title":"pm2"},{"location":"notes/Software/CLI/pm2/#pm2","text":"PM2 is a daemon process manager that will help you manage and keep your application online 24/7. Info This note was originally found in the rstacrus/cheatsheets GitHub repository.","title":"PM2"},{"location":"notes/Software/CLI/pm2/#table-of-contents","text":"PM2 Table of Contents Basic CLI Usage Fork mode Cluster mode Listing Logs Actions Misc Ecosystem File Overview Simple Config Multiple Applications CLI Management of Application Manage All At Once Manage Specific Applications Switching Environments","title":"Table of Contents"},{"location":"notes/Software/CLI/pm2/#basic-cli-usage","text":"","title":"Basic CLI Usage"},{"location":"notes/Software/CLI/pm2/#fork-mode","text":"Command Description pm2 start app.js --name my-api Start and name a process","title":"Fork mode"},{"location":"notes/Software/CLI/pm2/#cluster-mode","text":"Command Description pm2 start app.js -i 0 Will start maximum processes with LB depending on available CPUs pm2 start app.js -i max Same as above, but deprecated pm2 scale app +3 Scales app up by 3 workers pm2 scale app 2 Scales app up or down to 2 workers total","title":"Cluster mode"},{"location":"notes/Software/CLI/pm2/#listing","text":"Command Description pm2 list Display all processes status pm2 jlist Print process list in raw JSON pm2 prettylist Print process list in beautified JSON --- --- pm2 describe 0 Display all information about a specific process --- --- pm2 monit Monitor all processes","title":"Listing"},{"location":"notes/Software/CLI/pm2/#logs","text":"Command Description pm2 logs [--raw] Display all processes logs in streaming pm2 flush Empty all log files pm2 reloadLogs Reload all logs","title":"Logs"},{"location":"notes/Software/CLI/pm2/#actions","text":"Command Description pm2 stop all Stop all processes pm2 restart all Restart all processes --- --- pm2 reload all Will 0s downtime reload (for NETWORKED apps) --- --- pm2 stop 0 Stop specific process id pm2 restart 0 Restart specific process id --- --- pm2 delete 0 Will remove process from pm2 list pm2 delete all Will remove all processes from pm2 list","title":"Actions"},{"location":"notes/Software/CLI/pm2/#misc","text":"Command Description pm2 reset <process> Reset meta data (restarted time...) pm2 updatePM2 Update in memory pm2 pm2 ping Ensure pm2 daemon has been launched pm2 sendSignal SIGUSR2 my-app Send system signal to script --- --- pm2 start app.js --no-daemon Run pm2 daemon in the foreground if it doesn't exist already pm2 start app.js --no-vizion Skip vizion features (versioning control) pm2 start app.js --no-autorestart Do not automatically restart app","title":"Misc"},{"location":"notes/Software/CLI/pm2/#ecosystem-file","text":"","title":"Ecosystem File"},{"location":"notes/Software/CLI/pm2/#overview","text":"The ecosystem file tells PM2 how to run/manage your application to simplify working with it. The file by default is called ecosystem.config.js , but it can be called anything so long as it ends with .config.extension . It also supports JSON and YAML formats: Format Filename JavaScript ecosystem.config.js JSON ecosystem.config.json YAML ecosystem.config.yaml","title":"Overview"},{"location":"notes/Software/CLI/pm2/#simple-config","text":"pm2 ecosystem will generate a sample file to get you started, which can then be managed with pm2 [start|restart|stop|delete] ecosystem.config.js to start/restart/stop/delete the file: module . exports = { apps : [ { name : 'app' , script : './app.js' , env : { NODE_ENV : 'development' }, env_production : { NODE_ENV : 'production' } } ] }","title":"Simple Config"},{"location":"notes/Software/CLI/pm2/#multiple-applications","text":"module . exports = { apps : [ { name : 'worker' , script : './worker.js' , watch : true , env : { NODE_ENV : 'development' }, env_production : { NODE_ENV : 'production' } }, { name : 'api-app' , script : './api.js' , instances : 4 , exec_mode : 'cluster' } ] }","title":"Multiple Applications"},{"location":"notes/Software/CLI/pm2/#cli-management-of-application","text":"","title":"CLI Management of Application"},{"location":"notes/Software/CLI/pm2/#manage-all-at-once","text":"# Start all applications in file, if already running, they're restarted pm2 start ecosystem.config.js # Only start the app named worker-app pm2 start ecosystem.config.js --only worker-app # Stops all applications in file pm2 stop ecosystem.config.js # Restarts all applications in the file pm2 restart ecosystem.config.js # Reload all applications in the file pm2 reload ecosystem.config.js # Deletes all applications in the file pm2 delete ecosystem.config.js","title":"Manage All At Once"},{"location":"notes/Software/CLI/pm2/#manage-specific-applications","text":"pm2 start ecosystem.config.js --only api-app pm2 restart ecosystem.config.js --only api-app pm2 reload ecosystem.config.js --only api-app pm2 delete ecosystem.config.js --only api-app # Specific multiple applications pm2 start ecosystem.config.js --only \"api-app,worker-app\"","title":"Manage Specific Applications"},{"location":"notes/Software/CLI/pm2/#switching-environments","text":"# Start the app using the variables defined in env_production pm2 start ecosystem.config.js --env production # Restart the app using the variables defined in env_staging pm2 start ecosystem.config.js --env staging","title":"Switching Environments"},{"location":"notes/Software/CLI/tmux/","tags":["Software/CLI"],"text":"tmux \u00b6 Info This note was originally found in the rstacrus/cheatsheets GitHub repository. Table of Contents \u00b6 tmux Table of Contents Commands Sessions Windows Help Scrolling Copy/paste Panes Windows Detach/attach Niceties Status formats Attribute/colors Colors Attributes Variables Options Commands \u00b6 $ tmux -u # UTF8 mode -S ~/.tmux.socket Sessions \u00b6 tmux new tmux new -s session_name tmux attach # Default session tmux attach -s session_name tmux switch -t session_name tmux ls # List sessions tmux detach Windows \u00b6 tmux new-window Help \u00b6 C-b ? Scrolling \u00b6 C-b [ # Enter scroll mode then press up and down Copy/paste \u00b6 C-b [ # 1. Enter scroll mode first. Space # 2. Start selecting and move around. Enter # 3. Press enter to copy. C-b ] # Paste Panes \u00b6 C-b v # vert C-b n # horiz C-b hkjl # navigation C-b HJKL # resize C-b o # next window C-b x # close pane C-b { or } # move windows around Windows \u00b6 C-b c # New window C-b 1 # Go to window 1 Detach/attach \u00b6 C-b d # Detach C-b ( ) # Switch through sessions $ tmux attach Niceties \u00b6 C-b t # Time Status formats \u00b6 setw -g window-status-format `#[fg=8,bg=default]#I` See message-command-style in the man page. Attribute/colors \u00b6 Attribute Color #[fg=1] standard color #[fg=yellow] yellow #[bold] bold #[fg=colour240] 256 color #[fg=default] default #[fg=1,bg=2] combinations #[default] reset Colors \u00b6 black red green yellow blue magenta cyan white brightred (and so on) colour0 ... colour255 #333 (rgb hex) Attributes \u00b6 bold underscore blink noreverse hidden dim italics Variables \u00b6 Name Purpose #(date) shell command #I window index #S session name #W window name #F window flags #H Hostname #h Hostname, short #D pane id #P pane index #T pane title Options \u00b6 set -g status-justify [left|centre|right] set -g status-left '...' setw -g window-status-style setw -g window-status-activity-style setw -g window-status-bell-style setw -g window-status-content-style setw -g window-status-current-style setw -g window-status-last-style setw -g window-status-format setw -g window-status-current-format setw -g window-status-separator","title":"tmux"},{"location":"notes/Software/CLI/tmux/#tmux","text":"Info This note was originally found in the rstacrus/cheatsheets GitHub repository.","title":"tmux"},{"location":"notes/Software/CLI/tmux/#table-of-contents","text":"tmux Table of Contents Commands Sessions Windows Help Scrolling Copy/paste Panes Windows Detach/attach Niceties Status formats Attribute/colors Colors Attributes Variables Options","title":"Table of Contents"},{"location":"notes/Software/CLI/tmux/#commands","text":"$ tmux -u # UTF8 mode -S ~/.tmux.socket","title":"Commands"},{"location":"notes/Software/CLI/tmux/#sessions","text":"tmux new tmux new -s session_name tmux attach # Default session tmux attach -s session_name tmux switch -t session_name tmux ls # List sessions tmux detach","title":"Sessions"},{"location":"notes/Software/CLI/tmux/#windows","text":"tmux new-window","title":"Windows"},{"location":"notes/Software/CLI/tmux/#help","text":"C-b ?","title":"Help"},{"location":"notes/Software/CLI/tmux/#scrolling","text":"C-b [ # Enter scroll mode then press up and down","title":"Scrolling"},{"location":"notes/Software/CLI/tmux/#copypaste","text":"C-b [ # 1. Enter scroll mode first. Space # 2. Start selecting and move around. Enter # 3. Press enter to copy. C-b ] # Paste","title":"Copy/paste"},{"location":"notes/Software/CLI/tmux/#panes","text":"C-b v # vert C-b n # horiz C-b hkjl # navigation C-b HJKL # resize C-b o # next window C-b x # close pane C-b { or } # move windows around","title":"Panes"},{"location":"notes/Software/CLI/tmux/#windows_1","text":"C-b c # New window C-b 1 # Go to window 1","title":"Windows"},{"location":"notes/Software/CLI/tmux/#detachattach","text":"C-b d # Detach C-b ( ) # Switch through sessions $ tmux attach","title":"Detach/attach"},{"location":"notes/Software/CLI/tmux/#niceties","text":"C-b t # Time","title":"Niceties"},{"location":"notes/Software/CLI/tmux/#status-formats","text":"setw -g window-status-format `#[fg=8,bg=default]#I` See message-command-style in the man page.","title":"Status formats"},{"location":"notes/Software/CLI/tmux/#attributecolors","text":"Attribute Color #[fg=1] standard color #[fg=yellow] yellow #[bold] bold #[fg=colour240] 256 color #[fg=default] default #[fg=1,bg=2] combinations #[default] reset","title":"Attribute/colors"},{"location":"notes/Software/CLI/tmux/#colors","text":"black red green yellow blue magenta cyan white brightred (and so on) colour0 ... colour255 #333 (rgb hex)","title":"Colors"},{"location":"notes/Software/CLI/tmux/#attributes","text":"bold underscore blink noreverse hidden dim italics","title":"Attributes"},{"location":"notes/Software/CLI/tmux/#variables","text":"Name Purpose #(date) shell command #I window index #S session name #W window name #F window flags #H Hostname #h Hostname, short #D pane id #P pane index #T pane title","title":"Variables"},{"location":"notes/Software/CLI/tmux/#options","text":"set -g status-justify [left|centre|right] set -g status-left '...' setw -g window-status-style setw -g window-status-activity-style setw -g window-status-bell-style setw -g window-status-content-style setw -g window-status-current-style setw -g window-status-last-style setw -g window-status-format setw -g window-status-current-format setw -g window-status-separator","title":"Options"},{"location":"notes/Software/CLI/zsh/","tags":["Software/CLI"],"text":"zsh \u00b6 Note This note was originally found in the rstacrus/cheatsheets GitHub repository. Table of Contents \u00b6 zsh Table of Contents Expressions Change default shell Process Substitution Also see Expressions \u00b6 Expression Example Description !! sudo !! Last command ( sudo !! ) --- --- --- !* vim !* Last command's parameters ( vim !* ) !^ Last command's first parameter !$ Last command's last parameter --- --- --- !?ls <tab> sudo !?mv <tab> Command and params of last ls command !?ls?:* <tab> Params of last ls command --- --- --- *(m0) rm *(m0) Last modified today *(m-4) Last modified <4 days ago Change default shell \u00b6 chsh -s ` which zsh ` Process Substitution \u00b6 Expression Example Description <(COMMAND) grep \"needle\" <(curl \"https://haystack.io\") Replace argument with named pipe/FIFO (read-only) with command output =(COMMAND) vim =(curl \"https://haystack.io\") Replace argument with file (writable) containing command output Also see \u00b6 Bash cheatsheet Zsh is mostly compatible with Bash, so most everything in Bash's cheatsheet also applies.","title":"zsh"},{"location":"notes/Software/CLI/zsh/#zsh","text":"Note This note was originally found in the rstacrus/cheatsheets GitHub repository.","title":"zsh"},{"location":"notes/Software/CLI/zsh/#table-of-contents","text":"zsh Table of Contents Expressions Change default shell Process Substitution Also see","title":"Table of Contents"},{"location":"notes/Software/CLI/zsh/#expressions","text":"Expression Example Description !! sudo !! Last command ( sudo !! ) --- --- --- !* vim !* Last command's parameters ( vim !* ) !^ Last command's first parameter !$ Last command's last parameter --- --- --- !?ls <tab> sudo !?mv <tab> Command and params of last ls command !?ls?:* <tab> Params of last ls command --- --- --- *(m0) rm *(m0) Last modified today *(m-4) Last modified <4 days ago","title":"Expressions"},{"location":"notes/Software/CLI/zsh/#change-default-shell","text":"chsh -s ` which zsh `","title":"Change default shell"},{"location":"notes/Software/CLI/zsh/#process-substitution","text":"Expression Example Description <(COMMAND) grep \"needle\" <(curl \"https://haystack.io\") Replace argument with named pipe/FIFO (read-only) with command output =(COMMAND) vim =(curl \"https://haystack.io\") Replace argument with file (writable) containing command output","title":"Process Substitution"},{"location":"notes/Software/CLI/zsh/#also-see","text":"Bash cheatsheet Zsh is mostly compatible with Bash, so most everything in Bash's cheatsheet also applies.","title":"Also see"},{"location":"notes/Software/Packages/","tags":["Software/Packages","Index"],"text":"Packages \u00b6 This section contains notes on various packages/dependencies that I use in my projects. For example, one package I use a lot and have a note for is Axios , the NPM package for handling HTTP requests.","title":"Index"},{"location":"notes/Software/Packages/#packages","text":"This section contains notes on various packages/dependencies that I use in my projects. For example, one package I use a lot and have a note for is Axios , the NPM package for handling HTTP requests.","title":"Packages"},{"location":"notes/Software/Packages/Cosmiconfig/","tags":["Software/Packages","Tools/Config"],"text":"Cosmiconfig \u00b6 https://www.npmjs.com/package/cosmiconfig","title":"Cosmiconfig"},{"location":"notes/Software/Packages/Cosmiconfig/#cosmiconfig","text":"https://www.npmjs.com/package/cosmiconfig","title":"Cosmiconfig"},{"location":"notes/Software/Packages/DotEnv/","tags":["Software/Packages","Tools/Config"],"text":"DotEnv \u00b6 https://www.npmjs.com/package/dotenv","title":"DotEnv"},{"location":"notes/Software/Packages/DotEnv/#dotenv","text":"https://www.npmjs.com/package/dotenv","title":"DotEnv"},{"location":"notes/Software/Packages/Axios/","tags":["Software/Packages","Tools/API","Tools/HTTP"],"text":"Axios \u00b6 Info All of the notes on Axios use the official Axios Documentation as the source of information. Axios is a simple promise based HTTP client for the browser and node.js. Axios provides a simple to use library in a small package with a very extensible interface. Axios Homepage This section contains notes on the Axios library, covering things from basic usage of sending a GET request to more advanced uses such as using TypeScript types. Key Links \u00b6 Homepage NPM Package Page Documentation Sub-Pages \u00b6 Intro","title":"Index"},{"location":"notes/Software/Packages/Axios/#axios","text":"Info All of the notes on Axios use the official Axios Documentation as the source of information. Axios is a simple promise based HTTP client for the browser and node.js. Axios provides a simple to use library in a small package with a very extensible interface. Axios Homepage This section contains notes on the Axios library, covering things from basic usage of sending a GET request to more advanced uses such as using TypeScript types.","title":"Axios"},{"location":"notes/Software/Packages/Axios/#key-links","text":"Homepage NPM Package Page Documentation","title":"Key Links"},{"location":"notes/Software/Packages/Axios/#sub-pages","text":"Intro","title":"Sub-Pages"},{"location":"notes/Software/Packages/Axios/Intro/","tags":["Software/Packages","Tools/API","Tools/HTTP"],"text":"Intro \u00b6 Importing the Library \u00b6 When I'm importing Axios to a project I do what you'll see in the following snippet. The Axios object is what lets me create a new client of type AxiosInstance , and the AxiosInstance type is imported as a type reference. import Axios , { AxiosInstance } from 'axios' const axios : AxiosInstance = Axios . create ({ baseURL : '' }) POST \u2014 axios(config) \u00b6 // Send a POST request axios ({ method : 'post' , url : '/user/12345' , data : { firstName : 'Fred' , lastName : 'Flintstone' } }) GET \u2014 axios(config) \u00b6 // GET request for remote image in node.js axios ({ method : 'get' , url : 'http://bit.ly/2mTM3nY' , responseType : 'stream' }). then ( response => response . data . pipe ( fs . createWriteStream ( 'ada_lovelace.jpg' ))) GET \u2014 axios(url[, config]) \u00b6 // Send a GET request (default method) axios ( '/user/12345' ) Request Method Aliases \u00b6 For convenience, the following aliases have been provided for all supported request methods. axios.request(config) axios.get(url[, config]) axios.delete(url[, config]) axios.head(url[, config]) axios.options(url[, config]) axios.post(url[, data[, config]]) axios.put(url[, data[, config]]) axios.patch(url[, data[, config]])","title":"Intro"},{"location":"notes/Software/Packages/Axios/Intro/#intro","text":"","title":"Intro"},{"location":"notes/Software/Packages/Axios/Intro/#importing-the-library","text":"When I'm importing Axios to a project I do what you'll see in the following snippet. The Axios object is what lets me create a new client of type AxiosInstance , and the AxiosInstance type is imported as a type reference. import Axios , { AxiosInstance } from 'axios' const axios : AxiosInstance = Axios . create ({ baseURL : '' })","title":"Importing the Library"},{"location":"notes/Software/Packages/Axios/Intro/#post-axiosconfig","text":"// Send a POST request axios ({ method : 'post' , url : '/user/12345' , data : { firstName : 'Fred' , lastName : 'Flintstone' } })","title":"POST \u2014 axios(config)"},{"location":"notes/Software/Packages/Axios/Intro/#get-axiosconfig","text":"// GET request for remote image in node.js axios ({ method : 'get' , url : 'http://bit.ly/2mTM3nY' , responseType : 'stream' }). then ( response => response . data . pipe ( fs . createWriteStream ( 'ada_lovelace.jpg' )))","title":"GET \u2014 axios(config)"},{"location":"notes/Software/Packages/Axios/Intro/#get-axiosurl-config","text":"// Send a GET request (default method) axios ( '/user/12345' )","title":"GET \u2014 axios(url[, config])"},{"location":"notes/Software/Packages/Axios/Intro/#request-method-aliases","text":"For convenience, the following aliases have been provided for all supported request methods. axios.request(config) axios.get(url[, config]) axios.delete(url[, config]) axios.head(url[, config]) axios.options(url[, config]) axios.post(url[, data[, config]]) axios.put(url[, data[, config]]) axios.patch(url[, data[, config]])","title":"Request Method Aliases"},{"location":"Tags/","text":"Tags \u00b6 Following is a list of relevant tags: API \u00b6 HTTP Status Codes RESTful API Intro Over HTTP Schema Visual Development \u00b6 Extensions Shortcuts pm2 GraphQL \u00b6 Intro Over HTTP Schema Visual Index \u00b6 Index Index Index Index Index Index Software \u00b6 Index Extensions Shortcuts ADB Homebrew bash cron curl Software/App \u00b6 Index Extensions Shortcuts Software/Apps \u00b6 Index Software/CLI \u00b6 Index ADB Doppler Homebrew bash cron curl httpie pm2 tmux zsh Software/Packages \u00b6 Index Cosmiconfig DotEnv Index Intro Tools/API \u00b6 Index Intro Tools/Config \u00b6 Doppler Cosmiconfig DotEnv Tools/HTTP \u00b6 Index Intro","title":"Tags"},{"location":"Tags/#tags","text":"Following is a list of relevant tags:","title":"Tags"},{"location":"Tags/#api","text":"HTTP Status Codes RESTful API Intro Over HTTP Schema Visual","title":"API"},{"location":"Tags/#development","text":"Extensions Shortcuts pm2","title":"Development"},{"location":"Tags/#graphql","text":"Intro Over HTTP Schema Visual","title":"GraphQL"},{"location":"Tags/#index","text":"Index Index Index Index Index Index","title":"Index"},{"location":"Tags/#software","text":"Index Extensions Shortcuts ADB Homebrew bash cron curl","title":"Software"},{"location":"Tags/#softwareapp","text":"Index Extensions Shortcuts","title":"Software/App"},{"location":"Tags/#softwareapps","text":"Index","title":"Software/Apps"},{"location":"Tags/#softwarecli","text":"Index ADB Doppler Homebrew bash cron curl httpie pm2 tmux zsh","title":"Software/CLI"},{"location":"Tags/#softwarepackages","text":"Index Cosmiconfig DotEnv Index Intro","title":"Software/Packages"},{"location":"Tags/#toolsapi","text":"Index Intro","title":"Tools/API"},{"location":"Tags/#toolsconfig","text":"Doppler Cosmiconfig DotEnv","title":"Tools/Config"},{"location":"Tags/#toolshttp","text":"Index Intro","title":"Tools/HTTP"}]}